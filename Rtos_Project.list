
Rtos_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005668  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080057f8  080057f8  000067f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005884  08005884  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005884  08005884  00007010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005884  08005884  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005884  08005884  00006884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005888  08005888  00006888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800588c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007010  2**0
                  CONTENTS
 10 .bss          0000117c  20000010  20000010  00007010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000118c  2000118c  00007010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 13 .debug_info   000134dc  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002811  00000000  00000000  0001a51c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001098  00000000  00000000  0001cd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cf6  00000000  00000000  0001ddc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022570  00000000  00000000  0001eabe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013ad3  00000000  00000000  0004102e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd06d  00000000  00000000  00054b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00131b6e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045bc  00000000  00000000  00131bb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00136170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080057e0 	.word	0x080057e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080057e0 	.word	0x080057e0

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	@ (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	@ (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	@ 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	2000002c 	.word	0x2000002c
 8000200:	20000080 	.word	0x20000080

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b5b0      	push	{r4, r5, r7, lr}
 8000206:	b08e      	sub	sp, #56	@ 0x38
 8000208:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020a:	f000 fc1f 	bl	8000a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020e:	f000 f839 	bl	8000284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000212:	f000 f9f9 	bl	8000608 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000216:	f000 f897 	bl	8000348 <MX_ADC1_Init>
  MX_HRTIM1_Init();
 800021a:	f000 f905 	bl	8000428 <MX_HRTIM1_Init>
  MX_USART2_UART_Init();
 800021e:	f000 f9c3 	bl	80005a8 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000222:	4b14      	ldr	r3, [pc, #80]	@ (8000274 <main+0x70>)
 8000224:	f107 041c 	add.w	r4, r7, #28
 8000228:	461d      	mov	r5, r3
 800022a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800022c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800022e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000232:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000236:	f107 031c 	add.w	r3, r7, #28
 800023a:	2100      	movs	r1, #0
 800023c:	4618      	mov	r0, r3
 800023e:	f004 f84f 	bl	80042e0 <osThreadCreate>
 8000242:	4603      	mov	r3, r0
 8000244:	4a0c      	ldr	r2, [pc, #48]	@ (8000278 <main+0x74>)
 8000246:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask2 */
  osThreadDef(myTask2, Task2_init, osPriorityIdle, 0, 128);
 8000248:	4b0c      	ldr	r3, [pc, #48]	@ (800027c <main+0x78>)
 800024a:	463c      	mov	r4, r7
 800024c:	461d      	mov	r5, r3
 800024e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000250:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000252:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000256:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask2Handle = osThreadCreate(osThread(myTask2), NULL);
 800025a:	463b      	mov	r3, r7
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f004 f83e 	bl	80042e0 <osThreadCreate>
 8000264:	4603      	mov	r3, r0
 8000266:	4a06      	ldr	r2, [pc, #24]	@ (8000280 <main+0x7c>)
 8000268:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800026a:	f004 f832 	bl	80042d2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800026e:	bf00      	nop
 8000270:	e7fd      	b.n	800026e <main+0x6a>
 8000272:	bf00      	nop
 8000274:	08005804 	.word	0x08005804
 8000278:	20000434 	.word	0x20000434
 800027c:	08005828 	.word	0x08005828
 8000280:	20000438 	.word	0x20000438

08000284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b096      	sub	sp, #88	@ 0x58
 8000288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800028e:	2228      	movs	r2, #40	@ 0x28
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f005 fa78 	bl	8005788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000298:	f107 031c 	add.w	r3, r7, #28
 800029c:	2200      	movs	r2, #0
 800029e:	601a      	str	r2, [r3, #0]
 80002a0:	605a      	str	r2, [r3, #4]
 80002a2:	609a      	str	r2, [r3, #8]
 80002a4:	60da      	str	r2, [r3, #12]
 80002a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a8:	463b      	mov	r3, r7
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
 80002b2:	60da      	str	r2, [r3, #12]
 80002b4:	611a      	str	r2, [r3, #16]
 80002b6:	615a      	str	r2, [r3, #20]
 80002b8:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002ba:	2301      	movs	r3, #1
 80002bc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c8:	2301      	movs	r3, #1
 80002ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002cc:	2302      	movs	r3, #2
 80002ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002d4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002d6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002da:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002dc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80002e0:	4618      	mov	r0, r3
 80002e2:	f002 f8eb 	bl	80024bc <HAL_RCC_OscConfig>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80002ec:	f000 fa0c 	bl	8000708 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f0:	230f      	movs	r3, #15
 80002f2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f4:	2302      	movs	r3, #2
 80002f6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000300:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000306:	f107 031c 	add.w	r3, r7, #28
 800030a:	2102      	movs	r1, #2
 800030c:	4618      	mov	r0, r3
 800030e:	f003 f8e3 	bl	80034d8 <HAL_RCC_ClockConfig>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000318:	f000 f9f6 	bl	8000708 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1|RCC_PERIPHCLK_ADC12;
 800031c:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000320:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000322:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000326:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Hrtim1ClockSelection = RCC_HRTIM1CLK_HCLK;
 8000328:	2300      	movs	r3, #0
 800032a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800032c:	463b      	mov	r3, r7
 800032e:	4618      	mov	r0, r3
 8000330:	f003 fae4 	bl	80038fc <HAL_RCCEx_PeriphCLKConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800033a:	f000 f9e5 	bl	8000708 <Error_Handler>
  }
}
 800033e:	bf00      	nop
 8000340:	3758      	adds	r7, #88	@ 0x58
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
	...

08000348 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b08a      	sub	sp, #40	@ 0x28
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800034e:	f107 031c 	add.w	r3, r7, #28
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	605a      	str	r2, [r3, #4]
 8000358:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	2200      	movs	r2, #0
 800035e:	601a      	str	r2, [r3, #0]
 8000360:	605a      	str	r2, [r3, #4]
 8000362:	609a      	str	r2, [r3, #8]
 8000364:	60da      	str	r2, [r3, #12]
 8000366:	611a      	str	r2, [r3, #16]
 8000368:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800036a:	4b2e      	ldr	r3, [pc, #184]	@ (8000424 <MX_ADC1_Init+0xdc>)
 800036c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000370:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000372:	4b2c      	ldr	r3, [pc, #176]	@ (8000424 <MX_ADC1_Init+0xdc>)
 8000374:	2200      	movs	r2, #0
 8000376:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000378:	4b2a      	ldr	r3, [pc, #168]	@ (8000424 <MX_ADC1_Init+0xdc>)
 800037a:	2200      	movs	r2, #0
 800037c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800037e:	4b29      	ldr	r3, [pc, #164]	@ (8000424 <MX_ADC1_Init+0xdc>)
 8000380:	2200      	movs	r2, #0
 8000382:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000384:	4b27      	ldr	r3, [pc, #156]	@ (8000424 <MX_ADC1_Init+0xdc>)
 8000386:	2200      	movs	r2, #0
 8000388:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800038a:	4b26      	ldr	r3, [pc, #152]	@ (8000424 <MX_ADC1_Init+0xdc>)
 800038c:	2200      	movs	r2, #0
 800038e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000392:	4b24      	ldr	r3, [pc, #144]	@ (8000424 <MX_ADC1_Init+0xdc>)
 8000394:	2200      	movs	r2, #0
 8000396:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000398:	4b22      	ldr	r3, [pc, #136]	@ (8000424 <MX_ADC1_Init+0xdc>)
 800039a:	2201      	movs	r2, #1
 800039c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800039e:	4b21      	ldr	r3, [pc, #132]	@ (8000424 <MX_ADC1_Init+0xdc>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80003a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000424 <MX_ADC1_Init+0xdc>)
 80003a6:	2201      	movs	r2, #1
 80003a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000424 <MX_ADC1_Init+0xdc>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000424 <MX_ADC1_Init+0xdc>)
 80003b4:	2204      	movs	r2, #4
 80003b6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000424 <MX_ADC1_Init+0xdc>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003be:	4b19      	ldr	r3, [pc, #100]	@ (8000424 <MX_ADC1_Init+0xdc>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003c4:	4817      	ldr	r0, [pc, #92]	@ (8000424 <MX_ADC1_Init+0xdc>)
 80003c6:	f000 fba7 	bl	8000b18 <HAL_ADC_Init>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80003d0:	f000 f99a 	bl	8000708 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003d4:	2300      	movs	r3, #0
 80003d6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003d8:	f107 031c 	add.w	r3, r7, #28
 80003dc:	4619      	mov	r1, r3
 80003de:	4811      	ldr	r0, [pc, #68]	@ (8000424 <MX_ADC1_Init+0xdc>)
 80003e0:	f000 ffea 	bl	80013b8 <HAL_ADCEx_MultiModeConfigChannel>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80003ea:	f000 f98d 	bl	8000708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80003ee:	230b      	movs	r3, #11
 80003f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003f2:	2301      	movs	r3, #1
 80003f4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003f6:	2300      	movs	r3, #0
 80003f8:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003fa:	2300      	movs	r3, #0
 80003fc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003fe:	2300      	movs	r3, #0
 8000400:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000402:	2300      	movs	r3, #0
 8000404:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	4619      	mov	r1, r3
 800040a:	4806      	ldr	r0, [pc, #24]	@ (8000424 <MX_ADC1_Init+0xdc>)
 800040c:	f000 fd16 	bl	8000e3c <HAL_ADC_ConfigChannel>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000416:	f000 f977 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800041a:	bf00      	nop
 800041c:	3728      	adds	r7, #40	@ 0x28
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	20000280 	.word	0x20000280

08000428 <MX_HRTIM1_Init>:
  * @brief HRTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM1_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b0a2      	sub	sp, #136	@ 0x88
 800042c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 800042e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]
 8000438:	609a      	str	r2, [r3, #8]
 800043a:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 800043c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000440:	2254      	movs	r2, #84	@ 0x54
 8000442:	2100      	movs	r1, #0
 8000444:	4618      	mov	r0, r3
 8000446:	f005 f99f 	bl	8005788 <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 800044a:	1d3b      	adds	r3, r7, #4
 800044c:	2220      	movs	r2, #32
 800044e:	2100      	movs	r1, #0
 8000450:	4618      	mov	r0, r3
 8000452:	f005 f999 	bl	8005788 <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 8000456:	4b52      	ldr	r3, [pc, #328]	@ (80005a0 <MX_HRTIM1_Init+0x178>)
 8000458:	4a52      	ldr	r2, [pc, #328]	@ (80005a4 <MX_HRTIM1_Init+0x17c>)
 800045a:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 800045c:	4b50      	ldr	r3, [pc, #320]	@ (80005a0 <MX_HRTIM1_Init+0x178>)
 800045e:	2200      	movs	r2, #0
 8000460:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8000462:	4b4f      	ldr	r3, [pc, #316]	@ (80005a0 <MX_HRTIM1_Init+0x178>)
 8000464:	2200      	movs	r2, #0
 8000466:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8000468:	484d      	ldr	r0, [pc, #308]	@ (80005a0 <MX_HRTIM1_Init+0x178>)
 800046a:	f001 fb41 	bl	8001af0 <HAL_HRTIM_Init>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <MX_HRTIM1_Init+0x50>
  {
    Error_Handler();
 8000474:	f000 f948 	bl	8000708 <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFFD;
 8000478:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 800047c:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimeBaseCfg.RepetitionCounter = 0x00;
 800047e:	2300      	movs	r3, #0
 8000480:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 8000482:	2305      	movs	r3, #5
 8000484:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8000488:	2308      	movs	r3, #8
 800048a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 800048e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000492:	461a      	mov	r2, r3
 8000494:	2102      	movs	r1, #2
 8000496:	4842      	ldr	r0, [pc, #264]	@ (80005a0 <MX_HRTIM1_Init+0x178>)
 8000498:	f001 fbf6 	bl	8001c88 <HAL_HRTIM_TimeBaseConfig>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_HRTIM1_Init+0x7e>
  {
    Error_Handler();
 80004a2:	f000 f931 	bl	8000708 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 80004a6:	2300      	movs	r3, #0
 80004a8:	627b      	str	r3, [r7, #36]	@ 0x24
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 80004aa:	2300      	movs	r3, #0
 80004ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  pTimerCfg.DMASrcAddress = 0x0000;
 80004ae:	2300      	movs	r3, #0
 80004b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pTimerCfg.DMADstAddress = 0x0000;
 80004b2:	2300      	movs	r3, #0
 80004b4:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.DMASize = 0x1;
 80004b6:	2301      	movs	r3, #1
 80004b8:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 80004ba:	2300      	movs	r3, #0
 80004bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 80004be:	2300      	movs	r3, #0
 80004c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80004c2:	2300      	movs	r3, #0
 80004c4:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 80004c6:	2300      	movs	r3, #0
 80004c8:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 80004ca:	2300      	movs	r3, #0
 80004cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 80004ce:	2300      	movs	r3, #0
 80004d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 80004d2:	2300      	movs	r3, #0
 80004d4:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 80004d6:	2300      	movs	r3, #0
 80004d8:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 80004da:	2300      	movs	r3, #0
 80004dc:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 80004de:	2300      	movs	r3, #0
 80004e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 80004e2:	2300      	movs	r3, #0
 80004e4:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 80004e6:	2300      	movs	r3, #0
 80004e8:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 80004ea:	2300      	movs	r3, #0
 80004ec:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 80004ee:	2300      	movs	r3, #0
 80004f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 80004f2:	2300      	movs	r3, #0
 80004f4:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 80004f6:	2300      	movs	r3, #0
 80004f8:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 80004fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004fe:	461a      	mov	r2, r3
 8000500:	2102      	movs	r1, #2
 8000502:	4827      	ldr	r0, [pc, #156]	@ (80005a0 <MX_HRTIM1_Init+0x178>)
 8000504:	f001 fbe8 	bl	8001cd8 <HAL_HRTIM_WaveformTimerConfig>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_HRTIM1_Init+0xea>
  {
    Error_Handler();
 800050e:	f000 f8fb 	bl	8000708 <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8000512:	2300      	movs	r3, #0
 8000514:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 8000516:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800051a:	461a      	mov	r2, r3
 800051c:	2103      	movs	r1, #3
 800051e:	4820      	ldr	r0, [pc, #128]	@ (80005a0 <MX_HRTIM1_Init+0x178>)
 8000520:	f001 fbda 	bl	8001cd8 <HAL_HRTIM_WaveformTimerConfig>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_HRTIM1_Init+0x106>
  {
    Error_Handler();
 800052a:	f000 f8ed 	bl	8000708 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 800052e:	2300      	movs	r3, #0
 8000530:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8000532:	2300      	movs	r3, #0
 8000534:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 800053a:	2300      	movs	r3, #0
 800053c:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 800053e:	2300      	movs	r3, #0
 8000540:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8000542:	2300      	movs	r3, #0
 8000544:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8000546:	2300      	movs	r3, #0
 8000548:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 800054a:	2300      	movs	r3, #0
 800054c:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	2210      	movs	r2, #16
 8000552:	2102      	movs	r1, #2
 8000554:	4812      	ldr	r0, [pc, #72]	@ (80005a0 <MX_HRTIM1_Init+0x178>)
 8000556:	f001 fc31 	bl	8001dbc <HAL_HRTIM_WaveformOutputConfig>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_HRTIM1_Init+0x13c>
  {
    Error_Handler();
 8000560:	f000 f8d2 	bl	8000708 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pOutputCfg) != HAL_OK)
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	2240      	movs	r2, #64	@ 0x40
 8000568:	2103      	movs	r1, #3
 800056a:	480d      	ldr	r0, [pc, #52]	@ (80005a0 <MX_HRTIM1_Init+0x178>)
 800056c:	f001 fc26 	bl	8001dbc <HAL_HRTIM_WaveformOutputConfig>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <MX_HRTIM1_Init+0x152>
  {
    Error_Handler();
 8000576:	f000 f8c7 	bl	8000708 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 800057a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800057e:	461a      	mov	r2, r3
 8000580:	2103      	movs	r1, #3
 8000582:	4807      	ldr	r0, [pc, #28]	@ (80005a0 <MX_HRTIM1_Init+0x178>)
 8000584:	f001 fb80 	bl	8001c88 <HAL_HRTIM_TimeBaseConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_HRTIM1_Init+0x16a>
  {
    Error_Handler();
 800058e:	f000 f8bb 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8000592:	4803      	ldr	r0, [pc, #12]	@ (80005a0 <MX_HRTIM1_Init+0x178>)
 8000594:	f000 f95c 	bl	8000850 <HAL_HRTIM_MspPostInit>

}
 8000598:	bf00      	nop
 800059a:	3788      	adds	r7, #136	@ 0x88
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	200002d0 	.word	0x200002d0
 80005a4:	40017400 	.word	0x40017400

080005a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005ac:	4b14      	ldr	r3, [pc, #80]	@ (8000600 <MX_USART2_UART_Init+0x58>)
 80005ae:	4a15      	ldr	r2, [pc, #84]	@ (8000604 <MX_USART2_UART_Init+0x5c>)
 80005b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80005b2:	4b13      	ldr	r3, [pc, #76]	@ (8000600 <MX_USART2_UART_Init+0x58>)
 80005b4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80005b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ba:	4b11      	ldr	r3, [pc, #68]	@ (8000600 <MX_USART2_UART_Init+0x58>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <MX_USART2_UART_Init+0x58>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000600 <MX_USART2_UART_Init+0x58>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <MX_USART2_UART_Init+0x58>)
 80005ce:	220c      	movs	r2, #12
 80005d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000600 <MX_USART2_UART_Init+0x58>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d8:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <MX_USART2_UART_Init+0x58>)
 80005da:	2200      	movs	r2, #0
 80005dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005de:	4b08      	ldr	r3, [pc, #32]	@ (8000600 <MX_USART2_UART_Init+0x58>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005e4:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <MX_USART2_UART_Init+0x58>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ea:	4805      	ldr	r0, [pc, #20]	@ (8000600 <MX_USART2_UART_Init+0x58>)
 80005ec:	f003 faba 	bl	8003b64 <HAL_UART_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005f6:	f000 f887 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200003ac 	.word	0x200003ac
 8000604:	40004400 	.word	0x40004400

08000608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b088      	sub	sp, #32
 800060c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800061e:	4b30      	ldr	r3, [pc, #192]	@ (80006e0 <MX_GPIO_Init+0xd8>)
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	4a2f      	ldr	r2, [pc, #188]	@ (80006e0 <MX_GPIO_Init+0xd8>)
 8000624:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000628:	6153      	str	r3, [r2, #20]
 800062a:	4b2d      	ldr	r3, [pc, #180]	@ (80006e0 <MX_GPIO_Init+0xd8>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	4b2a      	ldr	r3, [pc, #168]	@ (80006e0 <MX_GPIO_Init+0xd8>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	4a29      	ldr	r2, [pc, #164]	@ (80006e0 <MX_GPIO_Init+0xd8>)
 800063c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000640:	6153      	str	r3, [r2, #20]
 8000642:	4b27      	ldr	r3, [pc, #156]	@ (80006e0 <MX_GPIO_Init+0xd8>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064e:	4b24      	ldr	r3, [pc, #144]	@ (80006e0 <MX_GPIO_Init+0xd8>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	4a23      	ldr	r2, [pc, #140]	@ (80006e0 <MX_GPIO_Init+0xd8>)
 8000654:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000658:	6153      	str	r3, [r2, #20]
 800065a:	4b21      	ldr	r3, [pc, #132]	@ (80006e0 <MX_GPIO_Init+0xd8>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	2130      	movs	r1, #48	@ 0x30
 800066a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800066e:	f001 fa27 	bl	8001ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_U_Pin|LD_D_Pin|LD_L_Pin|LD_R_Pin, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8000678:	481a      	ldr	r0, [pc, #104]	@ (80006e4 <MX_GPIO_Init+0xdc>)
 800067a:	f001 fa21 	bl	8001ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800067e:	2301      	movs	r3, #1
 8000680:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000682:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	4619      	mov	r1, r3
 8000692:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000696:	f001 f8a1 	bl	80017dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800069a:	2330      	movs	r3, #48	@ 0x30
 800069c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069e:	2301      	movs	r3, #1
 80006a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	4619      	mov	r1, r3
 80006b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b4:	f001 f892 	bl	80017dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_U_Pin LD_D_Pin LD_L_Pin LD_R_Pin */
  GPIO_InitStruct.Pin = LD_U_Pin|LD_D_Pin|LD_L_Pin|LD_R_Pin;
 80006b8:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80006bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006be:	2301      	movs	r3, #1
 80006c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	4619      	mov	r1, r3
 80006d0:	4804      	ldr	r0, [pc, #16]	@ (80006e4 <MX_GPIO_Init+0xdc>)
 80006d2:	f001 f883 	bl	80017dc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006d6:	bf00      	nop
 80006d8:	3720      	adds	r7, #32
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48000400 	.word	0x48000400

080006e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006f0:	2001      	movs	r0, #1
 80006f2:	f003 fe41 	bl	8004378 <osDelay>
 80006f6:	e7fb      	b.n	80006f0 <StartDefaultTask+0x8>

080006f8 <Task2_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_init */
void Task2_init(void const * argument)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000700:	2001      	movs	r0, #1
 8000702:	f003 fe39 	bl	8004378 <osDelay>
 8000706:	e7fb      	b.n	8000700 <Task2_init+0x8>

08000708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800070c:	b672      	cpsid	i
}
 800070e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000710:	bf00      	nop
 8000712:	e7fd      	b.n	8000710 <Error_Handler+0x8>

08000714 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071a:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <HAL_MspInit+0x4c>)
 800071c:	699b      	ldr	r3, [r3, #24]
 800071e:	4a10      	ldr	r2, [pc, #64]	@ (8000760 <HAL_MspInit+0x4c>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6193      	str	r3, [r2, #24]
 8000726:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <HAL_MspInit+0x4c>)
 8000728:	699b      	ldr	r3, [r3, #24]
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000732:	4b0b      	ldr	r3, [pc, #44]	@ (8000760 <HAL_MspInit+0x4c>)
 8000734:	69db      	ldr	r3, [r3, #28]
 8000736:	4a0a      	ldr	r2, [pc, #40]	@ (8000760 <HAL_MspInit+0x4c>)
 8000738:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800073c:	61d3      	str	r3, [r2, #28]
 800073e:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <HAL_MspInit+0x4c>)
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	210f      	movs	r1, #15
 800074e:	f06f 0001 	mvn.w	r0, #1
 8000752:	f001 f81a 	bl	800178a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40021000 	.word	0x40021000

08000764 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	@ 0x28
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000784:	d13c      	bne.n	8000800 <HAL_ADC_MspInit+0x9c>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000786:	4b20      	ldr	r3, [pc, #128]	@ (8000808 <HAL_ADC_MspInit+0xa4>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	4a1f      	ldr	r2, [pc, #124]	@ (8000808 <HAL_ADC_MspInit+0xa4>)
 800078c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000790:	6153      	str	r3, [r2, #20]
 8000792:	4b1d      	ldr	r3, [pc, #116]	@ (8000808 <HAL_ADC_MspInit+0xa4>)
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b1a      	ldr	r3, [pc, #104]	@ (8000808 <HAL_ADC_MspInit+0xa4>)
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	4a19      	ldr	r2, [pc, #100]	@ (8000808 <HAL_ADC_MspInit+0xa4>)
 80007a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007a8:	6153      	str	r3, [r2, #20]
 80007aa:	4b17      	ldr	r3, [pc, #92]	@ (8000808 <HAL_ADC_MspInit+0xa4>)
 80007ac:	695b      	ldr	r3, [r3, #20]
 80007ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	4b14      	ldr	r3, [pc, #80]	@ (8000808 <HAL_ADC_MspInit+0xa4>)
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	4a13      	ldr	r2, [pc, #76]	@ (8000808 <HAL_ADC_MspInit+0xa4>)
 80007bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007c0:	6153      	str	r3, [r2, #20]
 80007c2:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <HAL_ADC_MspInit+0xa4>)
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = Vin_Sense_Pin|Vout_Sense_Pin;
 80007ce:	230a      	movs	r3, #10
 80007d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007d2:	2303      	movs	r3, #3
 80007d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	4619      	mov	r1, r3
 80007e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007e4:	f000 fffa 	bl	80017dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BK_Sense_Pin;
 80007e8:	2301      	movs	r3, #1
 80007ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ec:	2303      	movs	r3, #3
 80007ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BK_Sense_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	4804      	ldr	r0, [pc, #16]	@ (800080c <HAL_ADC_MspInit+0xa8>)
 80007fc:	f000 ffee 	bl	80017dc <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000800:	bf00      	nop
 8000802:	3728      	adds	r7, #40	@ 0x28
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40021000 	.word	0x40021000
 800080c:	48000400 	.word	0x48000400

08000810 <HAL_HRTIM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hhrtim: HRTIM handle pointer
  * @retval None
  */
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  if(hhrtim->Instance==HRTIM1)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a0a      	ldr	r2, [pc, #40]	@ (8000848 <HAL_HRTIM_MspInit+0x38>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d10b      	bne.n	800083a <HAL_HRTIM_MspInit+0x2a>
  {
    /* USER CODE BEGIN HRTIM1_MspInit 0 */

    /* USER CODE END HRTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8000822:	4b0a      	ldr	r3, [pc, #40]	@ (800084c <HAL_HRTIM_MspInit+0x3c>)
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	4a09      	ldr	r2, [pc, #36]	@ (800084c <HAL_HRTIM_MspInit+0x3c>)
 8000828:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800082c:	6193      	str	r3, [r2, #24]
 800082e:	4b07      	ldr	r3, [pc, #28]	@ (800084c <HAL_HRTIM_MspInit+0x3c>)
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END HRTIM1_MspInit 1 */

  }

}
 800083a:	bf00      	nop
 800083c:	3714      	adds	r7, #20
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	40017400 	.word	0x40017400
 800084c:	40021000 	.word	0x40021000

08000850 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08a      	sub	sp, #40	@ 0x28
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a20      	ldr	r2, [pc, #128]	@ (80008f0 <HAL_HRTIM_MspPostInit+0xa0>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d13a      	bne.n	80008e8 <HAL_HRTIM_MspPostInit+0x98>
  {
    /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

    /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000872:	4b20      	ldr	r3, [pc, #128]	@ (80008f4 <HAL_HRTIM_MspPostInit+0xa4>)
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	4a1f      	ldr	r2, [pc, #124]	@ (80008f4 <HAL_HRTIM_MspPostInit+0xa4>)
 8000878:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800087c:	6153      	str	r3, [r2, #20]
 800087e:	4b1d      	ldr	r3, [pc, #116]	@ (80008f4 <HAL_HRTIM_MspPostInit+0xa4>)
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b1a      	ldr	r3, [pc, #104]	@ (80008f4 <HAL_HRTIM_MspPostInit+0xa4>)
 800088c:	695b      	ldr	r3, [r3, #20]
 800088e:	4a19      	ldr	r2, [pc, #100]	@ (80008f4 <HAL_HRTIM_MspPostInit+0xa4>)
 8000890:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000894:	6153      	str	r3, [r2, #20]
 8000896:	4b17      	ldr	r3, [pc, #92]	@ (80008f4 <HAL_HRTIM_MspPostInit+0xa4>)
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> HRTIM1_CHA1
    PA9     ------> HRTIM1_CHA2
    PA10     ------> HRTIM1_CHB1
    PA11     ------> HRTIM1_CHB2
    */
    GPIO_InitStruct.Pin = BK_Drive_Pin|RC_Pin;
 80008a2:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80008a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008b0:	2303      	movs	r3, #3
 80008b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80008b4:	230d      	movs	r3, #13
 80008b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4619      	mov	r1, r3
 80008be:	480e      	ldr	r0, [pc, #56]	@ (80008f8 <HAL_HRTIM_MspPostInit+0xa8>)
 80008c0:	f000 ff8c 	bl	80017dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = P1_Drive_Pin|N1_Drive_Pin|N2_Drive_Pin|P2_Drive_Pin;
 80008c4:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80008c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008d2:	2303      	movs	r3, #3
 80008d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80008d6:	230d      	movs	r3, #13
 80008d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e4:	f000 ff7a 	bl	80017dc <HAL_GPIO_Init>
    /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

    /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 80008e8:	bf00      	nop
 80008ea:	3728      	adds	r7, #40	@ 0x28
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40017400 	.word	0x40017400
 80008f4:	40021000 	.word	0x40021000
 80008f8:	48000400 	.word	0x48000400

080008fc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	@ 0x28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a18      	ldr	r2, [pc, #96]	@ (800097c <HAL_UART_MspInit+0x80>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d129      	bne.n	8000972 <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800091e:	4b18      	ldr	r3, [pc, #96]	@ (8000980 <HAL_UART_MspInit+0x84>)
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	4a17      	ldr	r2, [pc, #92]	@ (8000980 <HAL_UART_MspInit+0x84>)
 8000924:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000928:	61d3      	str	r3, [r2, #28]
 800092a:	4b15      	ldr	r3, [pc, #84]	@ (8000980 <HAL_UART_MspInit+0x84>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4b12      	ldr	r3, [pc, #72]	@ (8000980 <HAL_UART_MspInit+0x84>)
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	4a11      	ldr	r2, [pc, #68]	@ (8000980 <HAL_UART_MspInit+0x84>)
 800093c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000940:	6153      	str	r3, [r2, #20]
 8000942:	4b0f      	ldr	r3, [pc, #60]	@ (8000980 <HAL_UART_MspInit+0x84>)
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 800094e:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800095c:	2303      	movs	r3, #3
 800095e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000960:	2307      	movs	r3, #7
 8000962:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800096e:	f000 ff35 	bl	80017dc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000972:	bf00      	nop
 8000974:	3728      	adds	r7, #40	@ 0x28
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40004400 	.word	0x40004400
 8000980:	40021000 	.word	0x40021000

08000984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <NMI_Handler+0x4>

0800098c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <HardFault_Handler+0x4>

08000994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <MemManage_Handler+0x4>

0800099c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <BusFault_Handler+0x4>

080009a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <UsageFault_Handler+0x4>

080009ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009be:	f000 f88b 	bl	8000ad8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80009c2:	f004 fa69 	bl	8004e98 <xTaskGetSchedulerState>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d001      	beq.n	80009d0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80009cc:	f004 fcac 	bl	8005328 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009d8:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <SystemInit+0x20>)
 80009da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009de:	4a05      	ldr	r2, [pc, #20]	@ (80009f4 <SystemInit+0x20>)
 80009e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a30 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80009fc:	f7ff ffea 	bl	80009d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a00:	480c      	ldr	r0, [pc, #48]	@ (8000a34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a02:	490d      	ldr	r1, [pc, #52]	@ (8000a38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a04:	4a0d      	ldr	r2, [pc, #52]	@ (8000a3c <LoopForever+0xe>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a08:	e002      	b.n	8000a10 <LoopCopyDataInit>

08000a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0e:	3304      	adds	r3, #4

08000a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a14:	d3f9      	bcc.n	8000a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a16:	4a0a      	ldr	r2, [pc, #40]	@ (8000a40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a18:	4c0a      	ldr	r4, [pc, #40]	@ (8000a44 <LoopForever+0x16>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a1c:	e001      	b.n	8000a22 <LoopFillZerobss>

08000a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a20:	3204      	adds	r2, #4

08000a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a24:	d3fb      	bcc.n	8000a1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a26:	f004 feb7 	bl	8005798 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a2a:	f7ff fbeb 	bl	8000204 <main>

08000a2e <LoopForever>:

LoopForever:
    b LoopForever
 8000a2e:	e7fe      	b.n	8000a2e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a30:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a38:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a3c:	0800588c 	.word	0x0800588c
  ldr r2, =_sbss
 8000a40:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a44:	2000118c 	.word	0x2000118c

08000a48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a48:	e7fe      	b.n	8000a48 <ADC1_2_IRQHandler>
	...

08000a4c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a50:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <HAL_Init+0x28>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a07      	ldr	r2, [pc, #28]	@ (8000a74 <HAL_Init+0x28>)
 8000a56:	f043 0310 	orr.w	r3, r3, #16
 8000a5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a5c:	2003      	movs	r0, #3
 8000a5e:	f000 fe89 	bl	8001774 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a62:	200f      	movs	r0, #15
 8000a64:	f000 f808 	bl	8000a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a68:	f7ff fe54 	bl	8000714 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40022000 	.word	0x40022000

08000a78 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a80:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <HAL_InitTick+0x54>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b12      	ldr	r3, [pc, #72]	@ (8000ad0 <HAL_InitTick+0x58>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 fe93 	bl	80017c2 <HAL_SYSTICK_Config>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e00e      	b.n	8000ac4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2b0f      	cmp	r3, #15
 8000aaa:	d80a      	bhi.n	8000ac2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aac:	2200      	movs	r2, #0
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	f000 fe69 	bl	800178a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab8:	4a06      	ldr	r2, [pc, #24]	@ (8000ad4 <HAL_InitTick+0x5c>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e000      	b.n	8000ac4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	20000004 	.word	0x20000004

08000ad8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <HAL_IncTick+0x20>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <HAL_IncTick+0x24>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	4a04      	ldr	r2, [pc, #16]	@ (8000afc <HAL_IncTick+0x24>)
 8000aea:	6013      	str	r3, [r2, #0]
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	20000008 	.word	0x20000008
 8000afc:	2000043c 	.word	0x2000043c

08000b00 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b04:	4b03      	ldr	r3, [pc, #12]	@ (8000b14 <HAL_GetTick+0x14>)
 8000b06:	681b      	ldr	r3, [r3, #0]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	2000043c 	.word	0x2000043c

08000b18 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b09a      	sub	sp, #104	@ 0x68
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b20:	2300      	movs	r3, #0
 8000b22:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000b26:	2300      	movs	r3, #0
 8000b28:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d101      	bne.n	8000b38 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000b34:	2301      	movs	r3, #1
 8000b36:	e172      	b.n	8000e1e <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	691b      	ldr	r3, [r3, #16]
 8000b3c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b42:	f003 0310 	and.w	r3, r3, #16
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d176      	bne.n	8000c38 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d152      	bne.n	8000bf8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2200      	movs	r2, #0
 8000b56:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2200      	movs	r2, #0
 8000b62:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2200      	movs	r2, #0
 8000b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff fdf9 	bl	8000764 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d13b      	bne.n	8000bf8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f000 fcdf 	bl	8001544 <ADC_Disable>
 8000b86:	4603      	mov	r3, r0
 8000b88:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b90:	f003 0310 	and.w	r3, r3, #16
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d12f      	bne.n	8000bf8 <HAL_ADC_Init+0xe0>
 8000b98:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d12b      	bne.n	8000bf8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000ba8:	f023 0302 	bic.w	r3, r3, #2
 8000bac:	f043 0202 	orr.w	r2, r3, #2
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	689a      	ldr	r2, [r3, #8]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000bc2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	689a      	ldr	r2, [r3, #8]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000bd2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000bd4:	4b94      	ldr	r3, [pc, #592]	@ (8000e28 <HAL_ADC_Init+0x310>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a94      	ldr	r2, [pc, #592]	@ (8000e2c <HAL_ADC_Init+0x314>)
 8000bda:	fba2 2303 	umull	r2, r3, r2, r3
 8000bde:	0c9a      	lsrs	r2, r3, #18
 8000be0:	4613      	mov	r3, r2
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	4413      	add	r3, r2
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000bea:	e002      	b.n	8000bf2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d1f9      	bne.n	8000bec <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d007      	beq.n	8000c16 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c14:	d110      	bne.n	8000c38 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1a:	f023 0312 	bic.w	r3, r3, #18
 8000c1e:	f043 0210 	orr.w	r2, r3, #16
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2a:	f043 0201 	orr.w	r2, r3, #1
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3c:	f003 0310 	and.w	r3, r3, #16
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	f040 80df 	bne.w	8000e04 <HAL_ADC_Init+0x2ec>
 8000c46:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f040 80da 	bne.w	8000e04 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f040 80d2 	bne.w	8000e04 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c64:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000c68:	f043 0202 	orr.w	r2, r3, #2
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c70:	4b6f      	ldr	r3, [pc, #444]	@ (8000e30 <HAL_ADC_Init+0x318>)
 8000c72:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c7c:	d102      	bne.n	8000c84 <HAL_ADC_Init+0x16c>
 8000c7e:	4b6d      	ldr	r3, [pc, #436]	@ (8000e34 <HAL_ADC_Init+0x31c>)
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	e002      	b.n	8000c8a <HAL_ADC_Init+0x172>
 8000c84:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000c88:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	f003 0303 	and.w	r3, r3, #3
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d108      	bne.n	8000caa <HAL_ADC_Init+0x192>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d101      	bne.n	8000caa <HAL_ADC_Init+0x192>
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e000      	b.n	8000cac <HAL_ADC_Init+0x194>
 8000caa:	2300      	movs	r3, #0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d11c      	bne.n	8000cea <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d010      	beq.n	8000cd8 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	f003 0303 	and.w	r3, r3, #3
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d107      	bne.n	8000cd2 <HAL_ADC_Init+0x1ba>
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d101      	bne.n	8000cd2 <HAL_ADC_Init+0x1ba>
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e000      	b.n	8000cd4 <HAL_ADC_Init+0x1bc>
 8000cd2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d108      	bne.n	8000cea <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000cd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	431a      	orrs	r2, r3
 8000ce6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ce8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	7e5b      	ldrb	r3, [r3, #25]
 8000cee:	035b      	lsls	r3, r3, #13
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000cf4:	2a01      	cmp	r2, #1
 8000cf6:	d002      	beq.n	8000cfe <HAL_ADC_Init+0x1e6>
 8000cf8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000cfc:	e000      	b.n	8000d00 <HAL_ADC_Init+0x1e8>
 8000cfe:	2200      	movs	r2, #0
 8000d00:	431a      	orrs	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	431a      	orrs	r2, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000d10:	4313      	orrs	r3, r2
 8000d12:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d11b      	bne.n	8000d56 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	7e5b      	ldrb	r3, [r3, #25]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d109      	bne.n	8000d3a <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	045a      	lsls	r2, r3, #17
 8000d2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000d30:	4313      	orrs	r3, r2
 8000d32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d36:	663b      	str	r3, [r7, #96]	@ 0x60
 8000d38:	e00d      	b.n	8000d56 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000d42:	f043 0220 	orr.w	r2, r3, #32
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4e:	f043 0201 	orr.w	r2, r3, #1
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d007      	beq.n	8000d6e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d66:	4313      	orrs	r3, r2
 8000d68:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	f003 030c 	and.w	r3, r3, #12
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d114      	bne.n	8000da6 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	6812      	ldr	r2, [r2, #0]
 8000d86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000d8a:	f023 0302 	bic.w	r3, r3, #2
 8000d8e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	7e1b      	ldrb	r3, [r3, #24]
 8000d94:	039a      	lsls	r2, r3, #14
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000da2:	4313      	orrs	r3, r2
 8000da4:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	68da      	ldr	r2, [r3, #12]
 8000dac:	4b22      	ldr	r3, [pc, #136]	@ (8000e38 <HAL_ADC_Init+0x320>)
 8000dae:	4013      	ands	r3, r2
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	6812      	ldr	r2, [r2, #0]
 8000db4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000db6:	430b      	orrs	r3, r1
 8000db8:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	691b      	ldr	r3, [r3, #16]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d10c      	bne.n	8000ddc <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc8:	f023 010f 	bic.w	r1, r3, #15
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	69db      	ldr	r3, [r3, #28]
 8000dd0:	1e5a      	subs	r2, r3, #1
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	631a      	str	r2, [r3, #48]	@ 0x30
 8000dda:	e007      	b.n	8000dec <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f022 020f 	bic.w	r2, r2, #15
 8000dea:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2200      	movs	r2, #0
 8000df0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df6:	f023 0303 	bic.w	r3, r3, #3
 8000dfa:	f043 0201 	orr.w	r2, r3, #1
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e02:	e00a      	b.n	8000e1a <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e08:	f023 0312 	bic.w	r3, r3, #18
 8000e0c:	f043 0210 	orr.w	r2, r3, #16
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000e14:	2301      	movs	r3, #1
 8000e16:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000e1a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3768      	adds	r7, #104	@ 0x68
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	431bde83 	.word	0x431bde83
 8000e30:	50000300 	.word	0x50000300
 8000e34:	50000100 	.word	0x50000100
 8000e38:	fff0c007 	.word	0xfff0c007

08000e3c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b09b      	sub	sp, #108	@ 0x6c
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e46:	2300      	movs	r3, #0
 8000e48:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d101      	bne.n	8000e5e <HAL_ADC_ConfigChannel+0x22>
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	e2a1      	b.n	80013a2 <HAL_ADC_ConfigChannel+0x566>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2201      	movs	r2, #1
 8000e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	f003 0304 	and.w	r3, r3, #4
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	f040 8285 	bne.w	8001380 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	d81c      	bhi.n	8000eb8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685a      	ldr	r2, [r3, #4]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	4413      	add	r3, r2
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	461a      	mov	r2, r3
 8000e92:	231f      	movs	r3, #31
 8000e94:	4093      	lsls	r3, r2
 8000e96:	43db      	mvns	r3, r3
 8000e98:	4019      	ands	r1, r3
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	6818      	ldr	r0, [r3, #0]
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685a      	ldr	r2, [r3, #4]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	4413      	add	r3, r2
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	fa00 f203 	lsl.w	r2, r0, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	631a      	str	r2, [r3, #48]	@ 0x30
 8000eb6:	e063      	b.n	8000f80 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b09      	cmp	r3, #9
 8000ebe:	d81e      	bhi.n	8000efe <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685a      	ldr	r2, [r3, #4]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	4413      	add	r3, r2
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	3b1e      	subs	r3, #30
 8000ed4:	221f      	movs	r2, #31
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	4019      	ands	r1, r3
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	6818      	ldr	r0, [r3, #0]
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	4413      	add	r3, r2
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	3b1e      	subs	r3, #30
 8000ef0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	635a      	str	r2, [r3, #52]	@ 0x34
 8000efc:	e040      	b.n	8000f80 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b0e      	cmp	r3, #14
 8000f04:	d81e      	bhi.n	8000f44 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685a      	ldr	r2, [r3, #4]
 8000f10:	4613      	mov	r3, r2
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	4413      	add	r3, r2
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	3b3c      	subs	r3, #60	@ 0x3c
 8000f1a:	221f      	movs	r2, #31
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	4019      	ands	r1, r3
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	6818      	ldr	r0, [r3, #0]
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685a      	ldr	r2, [r3, #4]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	4413      	add	r3, r2
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	3b3c      	subs	r3, #60	@ 0x3c
 8000f36:	fa00 f203 	lsl.w	r2, r0, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f42:	e01d      	b.n	8000f80 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685a      	ldr	r2, [r3, #4]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	4413      	add	r3, r2
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	3b5a      	subs	r3, #90	@ 0x5a
 8000f58:	221f      	movs	r2, #31
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	4019      	ands	r1, r3
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	6818      	ldr	r0, [r3, #0]
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685a      	ldr	r2, [r3, #4]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	4413      	add	r3, r2
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	3b5a      	subs	r3, #90	@ 0x5a
 8000f74:	fa00 f203 	lsl.w	r2, r0, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f003 030c 	and.w	r3, r3, #12
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f040 80e5 	bne.w	800115a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b09      	cmp	r3, #9
 8000f96:	d91c      	bls.n	8000fd2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	6999      	ldr	r1, [r3, #24]
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	4413      	add	r3, r2
 8000fa8:	3b1e      	subs	r3, #30
 8000faa:	2207      	movs	r2, #7
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	4019      	ands	r1, r3
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	6898      	ldr	r0, [r3, #8]
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	4413      	add	r3, r2
 8000fc2:	3b1e      	subs	r3, #30
 8000fc4:	fa00 f203 	lsl.w	r2, r0, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	619a      	str	r2, [r3, #24]
 8000fd0:	e019      	b.n	8001006 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	6959      	ldr	r1, [r3, #20]
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	4413      	add	r3, r2
 8000fe2:	2207      	movs	r2, #7
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	4019      	ands	r1, r3
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	6898      	ldr	r0, [r3, #8]
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	4413      	add	r3, r2
 8000ffa:	fa00 f203 	lsl.w	r2, r0, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	430a      	orrs	r2, r1
 8001004:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	695a      	ldr	r2, [r3, #20]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	08db      	lsrs	r3, r3, #3
 8001012:	f003 0303 	and.w	r3, r3, #3
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	691b      	ldr	r3, [r3, #16]
 8001022:	3b01      	subs	r3, #1
 8001024:	2b03      	cmp	r3, #3
 8001026:	d84f      	bhi.n	80010c8 <HAL_ADC_ConfigChannel+0x28c>
 8001028:	a201      	add	r2, pc, #4	@ (adr r2, 8001030 <HAL_ADC_ConfigChannel+0x1f4>)
 800102a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102e:	bf00      	nop
 8001030:	08001041 	.word	0x08001041
 8001034:	08001063 	.word	0x08001063
 8001038:	08001085 	.word	0x08001085
 800103c:	080010a7 	.word	0x080010a7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001046:	4b9c      	ldr	r3, [pc, #624]	@ (80012b8 <HAL_ADC_ConfigChannel+0x47c>)
 8001048:	4013      	ands	r3, r2
 800104a:	683a      	ldr	r2, [r7, #0]
 800104c:	6812      	ldr	r2, [r2, #0]
 800104e:	0691      	lsls	r1, r2, #26
 8001050:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001052:	430a      	orrs	r2, r1
 8001054:	431a      	orrs	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800105e:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001060:	e07b      	b.n	800115a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001068:	4b93      	ldr	r3, [pc, #588]	@ (80012b8 <HAL_ADC_ConfigChannel+0x47c>)
 800106a:	4013      	ands	r3, r2
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	6812      	ldr	r2, [r2, #0]
 8001070:	0691      	lsls	r1, r2, #26
 8001072:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001074:	430a      	orrs	r2, r1
 8001076:	431a      	orrs	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001080:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001082:	e06a      	b.n	800115a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800108a:	4b8b      	ldr	r3, [pc, #556]	@ (80012b8 <HAL_ADC_ConfigChannel+0x47c>)
 800108c:	4013      	ands	r3, r2
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	6812      	ldr	r2, [r2, #0]
 8001092:	0691      	lsls	r1, r2, #26
 8001094:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001096:	430a      	orrs	r2, r1
 8001098:	431a      	orrs	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80010a2:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80010a4:	e059      	b.n	800115a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80010ac:	4b82      	ldr	r3, [pc, #520]	@ (80012b8 <HAL_ADC_ConfigChannel+0x47c>)
 80010ae:	4013      	ands	r3, r2
 80010b0:	683a      	ldr	r2, [r7, #0]
 80010b2:	6812      	ldr	r2, [r2, #0]
 80010b4:	0691      	lsls	r1, r2, #26
 80010b6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80010b8:	430a      	orrs	r2, r1
 80010ba:	431a      	orrs	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80010c4:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80010c6:	e048      	b.n	800115a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	069b      	lsls	r3, r3, #26
 80010d8:	429a      	cmp	r2, r3
 80010da:	d107      	bne.n	80010ec <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80010ea:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80010f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	069b      	lsls	r3, r3, #26
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d107      	bne.n	8001110 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800110e:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001116:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	069b      	lsls	r3, r3, #26
 8001120:	429a      	cmp	r2, r3
 8001122:	d107      	bne.n	8001134 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001132:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800113a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	069b      	lsls	r3, r3, #26
 8001144:	429a      	cmp	r2, r3
 8001146:	d107      	bne.n	8001158 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001156:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001158:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f003 0303 	and.w	r3, r3, #3
 8001164:	2b01      	cmp	r3, #1
 8001166:	d108      	bne.n	800117a <HAL_ADC_ConfigChannel+0x33e>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b01      	cmp	r3, #1
 8001174:	d101      	bne.n	800117a <HAL_ADC_ConfigChannel+0x33e>
 8001176:	2301      	movs	r3, #1
 8001178:	e000      	b.n	800117c <HAL_ADC_ConfigChannel+0x340>
 800117a:	2300      	movs	r3, #0
 800117c:	2b00      	cmp	r3, #0
 800117e:	f040 810a 	bne.w	8001396 <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d00f      	beq.n	80011aa <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2201      	movs	r2, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43da      	mvns	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	400a      	ands	r2, r1
 80011a4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80011a8:	e049      	b.n	800123e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2201      	movs	r2, #1
 80011b8:	409a      	lsls	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	430a      	orrs	r2, r1
 80011c0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b09      	cmp	r3, #9
 80011ca:	d91c      	bls.n	8001206 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6999      	ldr	r1, [r3, #24]
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	4613      	mov	r3, r2
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	4413      	add	r3, r2
 80011dc:	3b1b      	subs	r3, #27
 80011de:	2207      	movs	r2, #7
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	4019      	ands	r1, r3
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	6898      	ldr	r0, [r3, #8]
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4613      	mov	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	4413      	add	r3, r2
 80011f6:	3b1b      	subs	r3, #27
 80011f8:	fa00 f203 	lsl.w	r2, r0, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	430a      	orrs	r2, r1
 8001202:	619a      	str	r2, [r3, #24]
 8001204:	e01b      	b.n	800123e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6959      	ldr	r1, [r3, #20]
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	1c5a      	adds	r2, r3, #1
 8001212:	4613      	mov	r3, r2
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	4413      	add	r3, r2
 8001218:	2207      	movs	r2, #7
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	4019      	ands	r1, r3
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	6898      	ldr	r0, [r3, #8]
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	1c5a      	adds	r2, r3, #1
 800122c:	4613      	mov	r3, r2
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	4413      	add	r3, r2
 8001232:	fa00 f203 	lsl.w	r2, r0, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	430a      	orrs	r2, r1
 800123c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800123e:	4b1f      	ldr	r3, [pc, #124]	@ (80012bc <HAL_ADC_ConfigChannel+0x480>)
 8001240:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b10      	cmp	r3, #16
 8001248:	d105      	bne.n	8001256 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800124a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001252:	2b00      	cmp	r3, #0
 8001254:	d015      	beq.n	8001282 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800125a:	2b11      	cmp	r3, #17
 800125c:	d105      	bne.n	800126a <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800125e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00b      	beq.n	8001282 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800126e:	2b12      	cmp	r3, #18
 8001270:	f040 8091 	bne.w	8001396 <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001274:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800127c:	2b00      	cmp	r3, #0
 800127e:	f040 808a 	bne.w	8001396 <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800128a:	d102      	bne.n	8001292 <HAL_ADC_ConfigChannel+0x456>
 800128c:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <HAL_ADC_ConfigChannel+0x484>)
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	e002      	b.n	8001298 <HAL_ADC_ConfigChannel+0x45c>
 8001292:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001296:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d10e      	bne.n	80012c4 <HAL_ADC_ConfigChannel+0x488>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d107      	bne.n	80012c4 <HAL_ADC_ConfigChannel+0x488>
 80012b4:	2301      	movs	r3, #1
 80012b6:	e006      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x48a>
 80012b8:	83fff000 	.word	0x83fff000
 80012bc:	50000300 	.word	0x50000300
 80012c0:	50000100 	.word	0x50000100
 80012c4:	2300      	movs	r3, #0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d150      	bne.n	800136c <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012ca:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d010      	beq.n	80012f2 <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f003 0303 	and.w	r3, r3, #3
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d107      	bne.n	80012ec <HAL_ADC_ConfigChannel+0x4b0>
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d101      	bne.n	80012ec <HAL_ADC_ConfigChannel+0x4b0>
 80012e8:	2301      	movs	r3, #1
 80012ea:	e000      	b.n	80012ee <HAL_ADC_ConfigChannel+0x4b2>
 80012ec:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d13c      	bne.n	800136c <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b10      	cmp	r3, #16
 80012f8:	d11d      	bne.n	8001336 <HAL_ADC_ConfigChannel+0x4fa>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001302:	d118      	bne.n	8001336 <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001304:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800130c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800130e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001310:	4b27      	ldr	r3, [pc, #156]	@ (80013b0 <HAL_ADC_ConfigChannel+0x574>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a27      	ldr	r2, [pc, #156]	@ (80013b4 <HAL_ADC_ConfigChannel+0x578>)
 8001316:	fba2 2303 	umull	r2, r3, r2, r3
 800131a:	0c9a      	lsrs	r2, r3, #18
 800131c:	4613      	mov	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4413      	add	r3, r2
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001326:	e002      	b.n	800132e <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	3b01      	subs	r3, #1
 800132c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1f9      	bne.n	8001328 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001334:	e02e      	b.n	8001394 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2b11      	cmp	r3, #17
 800133c:	d10b      	bne.n	8001356 <HAL_ADC_ConfigChannel+0x51a>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001346:	d106      	bne.n	8001356 <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001348:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001350:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001352:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001354:	e01e      	b.n	8001394 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2b12      	cmp	r3, #18
 800135c:	d11a      	bne.n	8001394 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800135e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001366:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001368:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800136a:	e013      	b.n	8001394 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001370:	f043 0220 	orr.w	r2, r3, #32
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800137e:	e00a      	b.n	8001396 <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001384:	f043 0220 	orr.w	r2, r3, #32
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001392:	e000      	b.n	8001396 <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001394:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800139e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	376c      	adds	r7, #108	@ 0x6c
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000000 	.word	0x20000000
 80013b4:	431bde83 	.word	0x431bde83

080013b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b099      	sub	sp, #100	@ 0x64
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013c2:	2300      	movs	r3, #0
 80013c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013d0:	d102      	bne.n	80013d8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80013d2:	4b5a      	ldr	r3, [pc, #360]	@ (800153c <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	e002      	b.n	80013de <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80013d8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80013dc:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e0a2      	b.n	800152e <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d101      	bne.n	80013f6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80013f2:	2302      	movs	r3, #2
 80013f4:	e09b      	b.n	800152e <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2201      	movs	r2, #1
 80013fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f003 0304 	and.w	r3, r3, #4
 8001408:	2b00      	cmp	r3, #0
 800140a:	d17f      	bne.n	800150c <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	2b00      	cmp	r3, #0
 8001416:	d179      	bne.n	800150c <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001418:	4b49      	ldr	r3, [pc, #292]	@ (8001540 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800141a:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d040      	beq.n	80014a6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001424:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	6859      	ldr	r1, [r3, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001436:	035b      	lsls	r3, r3, #13
 8001438:	430b      	orrs	r3, r1
 800143a:	431a      	orrs	r2, r3
 800143c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800143e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	2b01      	cmp	r3, #1
 800144c:	d108      	bne.n	8001460 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	2b01      	cmp	r3, #1
 800145a:	d101      	bne.n	8001460 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800145c:	2301      	movs	r3, #1
 800145e:	e000      	b.n	8001462 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001460:	2300      	movs	r3, #0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d15c      	bne.n	8001520 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 0303 	and.w	r3, r3, #3
 800146e:	2b01      	cmp	r3, #1
 8001470:	d107      	bne.n	8001482 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b01      	cmp	r3, #1
 800147c:	d101      	bne.n	8001482 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800147e:	2301      	movs	r3, #1
 8001480:	e000      	b.n	8001484 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001482:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001484:	2b00      	cmp	r3, #0
 8001486:	d14b      	bne.n	8001520 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001488:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001490:	f023 030f 	bic.w	r3, r3, #15
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	6811      	ldr	r1, [r2, #0]
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	6892      	ldr	r2, [r2, #8]
 800149c:	430a      	orrs	r2, r1
 800149e:	431a      	orrs	r2, r3
 80014a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80014a2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80014a4:	e03c      	b.n	8001520 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80014a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80014ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80014b0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f003 0303 	and.w	r3, r3, #3
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d108      	bne.n	80014d2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d101      	bne.n	80014d2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80014d2:	2300      	movs	r3, #0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d123      	bne.n	8001520 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f003 0303 	and.w	r3, r3, #3
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d107      	bne.n	80014f4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d101      	bne.n	80014f4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80014f0:	2301      	movs	r3, #1
 80014f2:	e000      	b.n	80014f6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80014f4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d112      	bne.n	8001520 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80014fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001502:	f023 030f 	bic.w	r3, r3, #15
 8001506:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001508:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800150a:	e009      	b.n	8001520 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001510:	f043 0220 	orr.w	r2, r3, #32
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800151e:	e000      	b.n	8001522 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001520:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800152a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 800152e:	4618      	mov	r0, r3
 8001530:	3764      	adds	r7, #100	@ 0x64
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	50000100 	.word	0x50000100
 8001540:	50000300 	.word	0x50000300

08001544 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 0303 	and.w	r3, r3, #3
 800155a:	2b01      	cmp	r3, #1
 800155c:	d108      	bne.n	8001570 <ADC_Disable+0x2c>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b01      	cmp	r3, #1
 800156a:	d101      	bne.n	8001570 <ADC_Disable+0x2c>
 800156c:	2301      	movs	r3, #1
 800156e:	e000      	b.n	8001572 <ADC_Disable+0x2e>
 8001570:	2300      	movs	r3, #0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d047      	beq.n	8001606 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f003 030d 	and.w	r3, r3, #13
 8001580:	2b01      	cmp	r3, #1
 8001582:	d10f      	bne.n	80015a4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f042 0202 	orr.w	r2, r2, #2
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2203      	movs	r2, #3
 800159a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800159c:	f7ff fab0 	bl	8000b00 <HAL_GetTick>
 80015a0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80015a2:	e029      	b.n	80015f8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a8:	f043 0210 	orr.w	r2, r3, #16
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b4:	f043 0201 	orr.w	r2, r3, #1
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e023      	b.n	8001608 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80015c0:	f7ff fa9e 	bl	8000b00 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d914      	bls.n	80015f8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d10d      	bne.n	80015f8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e0:	f043 0210 	orr.w	r2, r3, #16
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ec:	f043 0201 	orr.w	r2, r3, #1
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e007      	b.n	8001608 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	2b01      	cmp	r3, #1
 8001604:	d0dc      	beq.n	80015c0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001620:	4b0c      	ldr	r3, [pc, #48]	@ (8001654 <__NVIC_SetPriorityGrouping+0x44>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800162c:	4013      	ands	r3, r2
 800162e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001638:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800163c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001642:	4a04      	ldr	r2, [pc, #16]	@ (8001654 <__NVIC_SetPriorityGrouping+0x44>)
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	60d3      	str	r3, [r2, #12]
}
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800165c:	4b04      	ldr	r3, [pc, #16]	@ (8001670 <__NVIC_GetPriorityGrouping+0x18>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	0a1b      	lsrs	r3, r3, #8
 8001662:	f003 0307 	and.w	r3, r3, #7
}
 8001666:	4618      	mov	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	6039      	str	r1, [r7, #0]
 800167e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001684:	2b00      	cmp	r3, #0
 8001686:	db0a      	blt.n	800169e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	b2da      	uxtb	r2, r3
 800168c:	490c      	ldr	r1, [pc, #48]	@ (80016c0 <__NVIC_SetPriority+0x4c>)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	0112      	lsls	r2, r2, #4
 8001694:	b2d2      	uxtb	r2, r2
 8001696:	440b      	add	r3, r1
 8001698:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800169c:	e00a      	b.n	80016b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4908      	ldr	r1, [pc, #32]	@ (80016c4 <__NVIC_SetPriority+0x50>)
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	3b04      	subs	r3, #4
 80016ac:	0112      	lsls	r2, r2, #4
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	440b      	add	r3, r1
 80016b2:	761a      	strb	r2, [r3, #24]
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000e100 	.word	0xe000e100
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b089      	sub	sp, #36	@ 0x24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f1c3 0307 	rsb	r3, r3, #7
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	bf28      	it	cs
 80016e6:	2304      	movcs	r3, #4
 80016e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3304      	adds	r3, #4
 80016ee:	2b06      	cmp	r3, #6
 80016f0:	d902      	bls.n	80016f8 <NVIC_EncodePriority+0x30>
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3b03      	subs	r3, #3
 80016f6:	e000      	b.n	80016fa <NVIC_EncodePriority+0x32>
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43da      	mvns	r2, r3
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	401a      	ands	r2, r3
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001710:	f04f 31ff 	mov.w	r1, #4294967295
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	fa01 f303 	lsl.w	r3, r1, r3
 800171a:	43d9      	mvns	r1, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001720:	4313      	orrs	r3, r2
         );
}
 8001722:	4618      	mov	r0, r3
 8001724:	3724      	adds	r7, #36	@ 0x24
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
	...

08001730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3b01      	subs	r3, #1
 800173c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001740:	d301      	bcc.n	8001746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001742:	2301      	movs	r3, #1
 8001744:	e00f      	b.n	8001766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001746:	4a0a      	ldr	r2, [pc, #40]	@ (8001770 <SysTick_Config+0x40>)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3b01      	subs	r3, #1
 800174c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800174e:	210f      	movs	r1, #15
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
 8001754:	f7ff ff8e 	bl	8001674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001758:	4b05      	ldr	r3, [pc, #20]	@ (8001770 <SysTick_Config+0x40>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800175e:	4b04      	ldr	r3, [pc, #16]	@ (8001770 <SysTick_Config+0x40>)
 8001760:	2207      	movs	r2, #7
 8001762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	e000e010 	.word	0xe000e010

08001774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ff47 	bl	8001610 <__NVIC_SetPriorityGrouping>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b086      	sub	sp, #24
 800178e:	af00      	add	r7, sp, #0
 8001790:	4603      	mov	r3, r0
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
 8001796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800179c:	f7ff ff5c 	bl	8001658 <__NVIC_GetPriorityGrouping>
 80017a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	68b9      	ldr	r1, [r7, #8]
 80017a6:	6978      	ldr	r0, [r7, #20]
 80017a8:	f7ff ff8e 	bl	80016c8 <NVIC_EncodePriority>
 80017ac:	4602      	mov	r2, r0
 80017ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b2:	4611      	mov	r1, r2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff ff5d 	bl	8001674 <__NVIC_SetPriority>
}
 80017ba:	bf00      	nop
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff ffb0 	bl	8001730 <SysTick_Config>
 80017d0:	4603      	mov	r3, r0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017dc:	b480      	push	{r7}
 80017de:	b087      	sub	sp, #28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ea:	e14e      	b.n	8001a8a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	2101      	movs	r1, #1
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	fa01 f303 	lsl.w	r3, r1, r3
 80017f8:	4013      	ands	r3, r2
 80017fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 8140 	beq.w	8001a84 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	2b01      	cmp	r3, #1
 800180e:	d005      	beq.n	800181c <HAL_GPIO_Init+0x40>
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d130      	bne.n	800187e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	2203      	movs	r2, #3
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4313      	orrs	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001852:	2201      	movs	r2, #1
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	091b      	lsrs	r3, r3, #4
 8001868:	f003 0201 	and.w	r2, r3, #1
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	2b03      	cmp	r3, #3
 8001888:	d017      	beq.n	80018ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	2203      	movs	r2, #3
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4013      	ands	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d123      	bne.n	800190e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	08da      	lsrs	r2, r3, #3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3208      	adds	r2, #8
 80018ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	220f      	movs	r2, #15
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4013      	ands	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	691a      	ldr	r2, [r3, #16]
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	08da      	lsrs	r2, r3, #3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3208      	adds	r2, #8
 8001908:	6939      	ldr	r1, [r7, #16]
 800190a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	2203      	movs	r2, #3
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	4013      	ands	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f003 0203 	and.w	r2, r3, #3
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 809a 	beq.w	8001a84 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001950:	4b55      	ldr	r3, [pc, #340]	@ (8001aa8 <HAL_GPIO_Init+0x2cc>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	4a54      	ldr	r2, [pc, #336]	@ (8001aa8 <HAL_GPIO_Init+0x2cc>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	6193      	str	r3, [r2, #24]
 800195c:	4b52      	ldr	r3, [pc, #328]	@ (8001aa8 <HAL_GPIO_Init+0x2cc>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001968:	4a50      	ldr	r2, [pc, #320]	@ (8001aac <HAL_GPIO_Init+0x2d0>)
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	089b      	lsrs	r3, r3, #2
 800196e:	3302      	adds	r3, #2
 8001970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001974:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	220f      	movs	r2, #15
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4013      	ands	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001992:	d013      	beq.n	80019bc <HAL_GPIO_Init+0x1e0>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a46      	ldr	r2, [pc, #280]	@ (8001ab0 <HAL_GPIO_Init+0x2d4>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d00d      	beq.n	80019b8 <HAL_GPIO_Init+0x1dc>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a45      	ldr	r2, [pc, #276]	@ (8001ab4 <HAL_GPIO_Init+0x2d8>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d007      	beq.n	80019b4 <HAL_GPIO_Init+0x1d8>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a44      	ldr	r2, [pc, #272]	@ (8001ab8 <HAL_GPIO_Init+0x2dc>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d101      	bne.n	80019b0 <HAL_GPIO_Init+0x1d4>
 80019ac:	2303      	movs	r3, #3
 80019ae:	e006      	b.n	80019be <HAL_GPIO_Init+0x1e2>
 80019b0:	2305      	movs	r3, #5
 80019b2:	e004      	b.n	80019be <HAL_GPIO_Init+0x1e2>
 80019b4:	2302      	movs	r3, #2
 80019b6:	e002      	b.n	80019be <HAL_GPIO_Init+0x1e2>
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <HAL_GPIO_Init+0x1e2>
 80019bc:	2300      	movs	r3, #0
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	f002 0203 	and.w	r2, r2, #3
 80019c4:	0092      	lsls	r2, r2, #2
 80019c6:	4093      	lsls	r3, r2
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019ce:	4937      	ldr	r1, [pc, #220]	@ (8001aac <HAL_GPIO_Init+0x2d0>)
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	089b      	lsrs	r3, r3, #2
 80019d4:	3302      	adds	r3, #2
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019dc:	4b37      	ldr	r3, [pc, #220]	@ (8001abc <HAL_GPIO_Init+0x2e0>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4013      	ands	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a00:	4a2e      	ldr	r2, [pc, #184]	@ (8001abc <HAL_GPIO_Init+0x2e0>)
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a06:	4b2d      	ldr	r3, [pc, #180]	@ (8001abc <HAL_GPIO_Init+0x2e0>)
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	4013      	ands	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a2a:	4a24      	ldr	r2, [pc, #144]	@ (8001abc <HAL_GPIO_Init+0x2e0>)
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a30:	4b22      	ldr	r3, [pc, #136]	@ (8001abc <HAL_GPIO_Init+0x2e0>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a54:	4a19      	ldr	r2, [pc, #100]	@ (8001abc <HAL_GPIO_Init+0x2e0>)
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a5a:	4b18      	ldr	r3, [pc, #96]	@ (8001abc <HAL_GPIO_Init+0x2e0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	43db      	mvns	r3, r3
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a7e:	4a0f      	ldr	r2, [pc, #60]	@ (8001abc <HAL_GPIO_Init+0x2e0>)
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	3301      	adds	r3, #1
 8001a88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	fa22 f303 	lsr.w	r3, r2, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f47f aea9 	bne.w	80017ec <HAL_GPIO_Init+0x10>
  }
}
 8001a9a:	bf00      	nop
 8001a9c:	bf00      	nop
 8001a9e:	371c      	adds	r7, #28
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40010000 	.word	0x40010000
 8001ab0:	48000400 	.word	0x48000400
 8001ab4:	48000800 	.word	0x48000800
 8001ab8:	48000c00 	.word	0x48000c00
 8001abc:	40010400 	.word	0x40010400

08001ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	807b      	strh	r3, [r7, #2]
 8001acc:	4613      	mov	r3, r2
 8001ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ad0:	787b      	ldrb	r3, [r7, #1]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ad6:	887a      	ldrh	r2, [r7, #2]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001adc:	e002      	b.n	8001ae4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ade:	887a      	ldrh	r2, [r7, #2]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e0ba      	b.n	8001c78 <HAL_HRTIM_Init+0x188>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2202      	movs	r2, #2
 8001b06:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d02e      	beq.n	8001ba4 <HAL_HRTIM_Init+0xb4>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a4d      	ldr	r2, [pc, #308]	@ (8001c80 <HAL_HRTIM_Init+0x190>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d10b      	bne.n	8001b68 <HAL_HRTIM_Init+0x78>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001b50:	4b4c      	ldr	r3, [pc, #304]	@ (8001c84 <HAL_HRTIM_Init+0x194>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	4a4b      	ldr	r2, [pc, #300]	@ (8001c84 <HAL_HRTIM_Init+0x194>)
 8001b56:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001b5a:	6193      	str	r3, [r2, #24]
 8001b5c:	4b49      	ldr	r3, [pc, #292]	@ (8001c84 <HAL_HRTIM_Init+0x194>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001b76:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b8c:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7fe fe33 	bl	8000810 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d012      	beq.n	8001bdc <HAL_HRTIM_Init+0xec>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001bc4:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8001bec:	2300      	movs	r3, #0
 8001bee:	75fb      	strb	r3, [r7, #23]
 8001bf0:	e03e      	b.n	8001c70 <HAL_HRTIM_Init+0x180>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8001bf2:	7dfa      	ldrb	r2, [r7, #23]
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	1a9b      	subs	r3, r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	440b      	add	r3, r1
 8001c00:	3318      	adds	r3, #24
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8001c06:	7dfa      	ldrb	r2, [r7, #23]
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	1a9b      	subs	r3, r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	440b      	add	r3, r1
 8001c14:	331c      	adds	r3, #28
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8001c1a:	7dfa      	ldrb	r2, [r7, #23]
 8001c1c:	6879      	ldr	r1, [r7, #4]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	1a9b      	subs	r3, r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	440b      	add	r3, r1
 8001c28:	3320      	adds	r3, #32
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8001c2e:	7dfa      	ldrb	r2, [r7, #23]
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	4613      	mov	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	1a9b      	subs	r3, r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	3324      	adds	r3, #36	@ 0x24
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8001c42:	7dfa      	ldrb	r2, [r7, #23]
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	4613      	mov	r3, r2
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	1a9b      	subs	r3, r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	440b      	add	r3, r1
 8001c50:	3328      	adds	r3, #40	@ 0x28
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8001c56:	7dfa      	ldrb	r2, [r7, #23]
 8001c58:	6879      	ldr	r1, [r7, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	1a9b      	subs	r3, r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	440b      	add	r3, r1
 8001c64:	3330      	adds	r3, #48	@ 0x30
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8001c6a:	7dfb      	ldrb	r3, [r7, #23]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8001c70:	7dfb      	ldrb	r3, [r7, #23]
 8001c72:	2b05      	cmp	r3, #5
 8001c74:	d9bd      	bls.n	8001bf2 <HAL_HRTIM_Init+0x102>
  }

  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3718      	adds	r7, #24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40017400 	.word	0x40017400
 8001c84:	40021000 	.word	0x40021000

08001c88 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d101      	bne.n	8001ca4 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	e015      	b.n	8001cd0 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	2b05      	cmp	r3, #5
 8001cb0:	d104      	bne.n	8001cbc <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f000 f8b2 	bl	8001e1e <HRTIM_MasterBase_Config>
 8001cba:	e004      	b.n	8001cc6 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	68b9      	ldr	r1, [r7, #8]
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f000 f8db 	bl	8001e7c <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d101      	bne.n	8001cf4 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	e05f      	b.n	8001db4 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d101      	bne.n	8001d02 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e058      	b.n	8001db4 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	2b05      	cmp	r3, #5
 8001d16:	d104      	bne.n	8001d22 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f000 f8ee 	bl	8001efc <HRTIM_MasterWaveform_Config>
 8001d20:	e004      	b.n	8001d2c <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	68b9      	ldr	r1, [r7, #8]
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 f94e 	bl	8001fc8 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6819      	ldr	r1, [r3, #0]
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	4613      	mov	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	1a9b      	subs	r3, r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4403      	add	r3, r0
 8001d3e:	3320      	adds	r3, #32
 8001d40:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6859      	ldr	r1, [r3, #4]
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	68ba      	ldr	r2, [r7, #8]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	1a9b      	subs	r3, r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4403      	add	r3, r0
 8001d54:	3324      	adds	r3, #36	@ 0x24
 8001d56:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6899      	ldr	r1, [r3, #8]
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	4613      	mov	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	1a9b      	subs	r3, r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4403      	add	r3, r0
 8001d6a:	3328      	adds	r3, #40	@ 0x28
 8001d6c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68d9      	ldr	r1, [r3, #12]
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	68ba      	ldr	r2, [r7, #8]
 8001d76:	4613      	mov	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	1a9b      	subs	r3, r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4403      	add	r3, r0
 8001d80:	332c      	adds	r3, #44	@ 0x2c
 8001d82:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6919      	ldr	r1, [r3, #16]
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	1a9b      	subs	r3, r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4403      	add	r3, r0
 8001d96:	3330      	adds	r3, #48	@ 0x30
 8001d98:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8001d9a:	68b9      	ldr	r1, [r7, #8]
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f000 fb2b 	bl	80023f8 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
 8001dc8:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d101      	bne.n	8001dda <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	e01d      	b.n	8001e16 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d101      	bne.n	8001de8 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8001de4:	2302      	movs	r3, #2
 8001de6:	e016      	b.n	8001e16 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2202      	movs	r2, #2
 8001df4:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	68b9      	ldr	r1, [r7, #8]
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f000 fa22 	bl	8002248 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b085      	sub	sp, #20
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f023 0307 	bic.w	r3, r3, #7
 8001e36:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f023 0318 	bic.w	r3, r3, #24
 8001e48:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	6812      	ldr	r2, [r2, #0]
 8001e64:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	6852      	ldr	r2, [r2, #4]
 8001e6e:	619a      	str	r2, [r3, #24]
}
 8001e70:	bf00      	nop
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b087      	sub	sp, #28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	01db      	lsls	r3, r3, #7
 8001e92:	4413      	add	r3, r2
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	f023 0307 	bic.w	r3, r3, #7
 8001e9e:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f023 0318 	bic.w	r3, r3, #24
 8001eb0:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	01db      	lsls	r3, r3, #7
 8001ec6:	4413      	add	r3, r2
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6819      	ldr	r1, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	01db      	lsls	r3, r3, #7
 8001ed8:	440b      	add	r3, r1
 8001eda:	3394      	adds	r3, #148	@ 0x94
 8001edc:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6819      	ldr	r1, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	01db      	lsls	r3, r3, #7
 8001eea:	440b      	add	r3, r1
 8001eec:	3398      	adds	r3, #152	@ 0x98
 8001eee:	601a      	str	r2, [r3, #0]
}
 8001ef0:	bf00      	nop
 8001ef2:	371c      	adds	r7, #28
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8001f16:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f023 0320 	bic.w	r3, r3, #32
 8001f1e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001f30:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001f42:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	69db      	ldr	r3, [r3, #28]
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8001f54:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8001f66:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8001f78:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8001f8c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f9e:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa4:	68ba      	ldr	r2, [r7, #8]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8001fbc:	bf00      	nop
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b08b      	sub	sp, #44	@ 0x2c
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	01db      	lsls	r3, r3, #7
 8001fde:	4413      	add	r3, r2
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	6811      	ldr	r1, [r2, #0]
 8001fe6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	3301      	adds	r3, #1
 8001fee:	01db      	lsls	r3, r3, #7
 8001ff0:	440b      	add	r3, r1
 8001ff2:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	01db      	lsls	r3, r3, #7
 8001ffe:	4413      	add	r3, r2
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	01db      	lsls	r3, r3, #7
 800200c:	4413      	add	r3, r2
 800200e:	33e8      	adds	r3, #232	@ 0xe8
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	01db      	lsls	r3, r3, #7
 800201c:	4413      	add	r3, r2
 800201e:	33e4      	adds	r3, #228	@ 0xe4
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 800202c:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 800202e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002030:	f023 0320 	bic.w	r3, r3, #32
 8002034:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800203c:	4313      	orrs	r3, r2
 800203e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8002040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002042:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800204e:	4313      	orrs	r3, r2
 8002050:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8002052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002054:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002058:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002060:	4313      	orrs	r3, r2
 8002062:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8002064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002066:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800206a:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002072:	4313      	orrs	r3, r2
 8002074:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8002076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002078:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 800207c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002084:	4313      	orrs	r3, r2
 8002086:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8002088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800208e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002094:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002096:	4313      	orrs	r3, r2
 8002098:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 800209a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80020a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80020aa:	d103      	bne.n	80020b4 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 80020ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020b2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 80020b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80020ba:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020c2:	4313      	orrs	r3, r2
 80020c4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 80020c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020cc:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020d4:	4313      	orrs	r3, r2
 80020d6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 80020d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020da:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 80020de:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020e6:	4313      	orrs	r3, r2
 80020e8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	f023 031f 	bic.w	r3, r3, #31
 80020f0:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020f6:	f003 031f 	and.w	r3, r3, #31
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002106:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002116:	2b00      	cmp	r3, #0
 8002118:	d108      	bne.n	800212c <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 800211a:	6a3b      	ldr	r3, [r7, #32]
 800211c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002120:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002126:	6a3a      	ldr	r2, [r7, #32]
 8002128:	4313      	orrs	r3, r2
 800212a:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002130:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8002134:	d004      	beq.n	8002140 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213a:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 800213e:	d103      	bne.n	8002148 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002144:	2b40      	cmp	r3, #64	@ 0x40
 8002146:	d108      	bne.n	800215a <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8002148:	6a3b      	ldr	r3, [r7, #32]
 800214a:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 800214e:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002154:	6a3a      	ldr	r2, [r7, #32]
 8002156:	4313      	orrs	r3, r2
 8002158:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800215e:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	2b04      	cmp	r3, #4
 8002164:	d843      	bhi.n	80021ee <HRTIM_TimingUnitWaveform_Config+0x226>
 8002166:	a201      	add	r2, pc, #4	@ (adr r2, 800216c <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8002168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800216c:	08002181 	.word	0x08002181
 8002170:	08002197 	.word	0x08002197
 8002174:	080021ad 	.word	0x080021ad
 8002178:	080021c3 	.word	0x080021c3
 800217c:	080021d9 	.word	0x080021d9
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002186:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	69fa      	ldr	r2, [r7, #28]
 8002190:	4313      	orrs	r3, r2
 8002192:	61fb      	str	r3, [r7, #28]
      break;
 8002194:	e02c      	b.n	80021f0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800219c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	69fa      	ldr	r2, [r7, #28]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61fb      	str	r3, [r7, #28]
      break;
 80021aa:	e021      	b.n	80021f0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80021b2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	69fa      	ldr	r2, [r7, #28]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61fb      	str	r3, [r7, #28]
      break;
 80021c0:	e016      	b.n	80021f0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80021c8:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	69fa      	ldr	r2, [r7, #28]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61fb      	str	r3, [r7, #28]
      break;
 80021d6:	e00b      	b.n	80021f0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80021de:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e4:	015b      	lsls	r3, r3, #5
 80021e6:	69fa      	ldr	r2, [r7, #28]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	61fb      	str	r3, [r7, #28]
      break;
 80021ec:	e000      	b.n	80021f0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 80021ee:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	3301      	adds	r3, #1
 80021f8:	01db      	lsls	r3, r3, #7
 80021fa:	4413      	add	r3, r2
 80021fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021fe:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	01db      	lsls	r3, r3, #7
 8002208:	4413      	add	r3, r2
 800220a:	33e8      	adds	r3, #232	@ 0xe8
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	01db      	lsls	r3, r3, #7
 8002218:	4413      	add	r3, r2
 800221a:	33e4      	adds	r3, #228	@ 0xe4
 800221c:	6a3a      	ldr	r2, [r7, #32]
 800221e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	01db      	lsls	r3, r3, #7
 8002228:	4413      	add	r3, r2
 800222a:	33d4      	adds	r3, #212	@ 0xd4
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	69fa      	ldr	r2, [r7, #28]
 8002236:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 800223a:	bf00      	nop
 800223c:	372c      	adds	r7, #44	@ 0x2c
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop

08002248 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8002248:	b480      	push	{r7}
 800224a:	b089      	sub	sp, #36	@ 0x24
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
 8002254:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8002256:	2300      	movs	r3, #0
 8002258:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	01db      	lsls	r3, r3, #7
 8002262:	4413      	add	r3, r2
 8002264:	33e4      	adds	r3, #228	@ 0xe4
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	01db      	lsls	r3, r3, #7
 8002272:	4413      	add	r3, r2
 8002274:	33b8      	adds	r3, #184	@ 0xb8
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	617b      	str	r3, [r7, #20]

  switch (Output)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002280:	d04d      	beq.n	800231e <HRTIM_OutputConfig+0xd6>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002288:	d85e      	bhi.n	8002348 <HRTIM_OutputConfig+0x100>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002290:	d032      	beq.n	80022f8 <HRTIM_OutputConfig+0xb0>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002298:	d856      	bhi.n	8002348 <HRTIM_OutputConfig+0x100>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b80      	cmp	r3, #128	@ 0x80
 800229e:	d03e      	beq.n	800231e <HRTIM_OutputConfig+0xd6>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b80      	cmp	r3, #128	@ 0x80
 80022a4:	d850      	bhi.n	8002348 <HRTIM_OutputConfig+0x100>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b40      	cmp	r3, #64	@ 0x40
 80022aa:	d025      	beq.n	80022f8 <HRTIM_OutputConfig+0xb0>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b40      	cmp	r3, #64	@ 0x40
 80022b0:	d84a      	bhi.n	8002348 <HRTIM_OutputConfig+0x100>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d01f      	beq.n	80022f8 <HRTIM_OutputConfig+0xb0>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d044      	beq.n	8002348 <HRTIM_OutputConfig+0x100>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b20      	cmp	r3, #32
 80022c2:	d841      	bhi.n	8002348 <HRTIM_OutputConfig+0x100>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d33e      	bcc.n	8002348 <HRTIM_OutputConfig+0x100>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3b02      	subs	r3, #2
 80022ce:	2201      	movs	r2, #1
 80022d0:	409a      	lsls	r2, r3
 80022d2:	4b48      	ldr	r3, [pc, #288]	@ (80023f4 <HRTIM_OutputConfig+0x1ac>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	bf14      	ite	ne
 80022da:	2301      	movne	r3, #1
 80022dc:	2300      	moveq	r3, #0
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d11c      	bne.n	800231e <HRTIM_OutputConfig+0xd6>
 80022e4:	f244 0304 	movw	r3, #16388	@ 0x4004
 80022e8:	4013      	ands	r3, r2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	bf14      	ite	ne
 80022ee:	2301      	movne	r3, #1
 80022f0:	2300      	moveq	r3, #0
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d027      	beq.n	8002348 <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6819      	ldr	r1, [r3, #0]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	01db      	lsls	r3, r3, #7
 8002304:	440b      	add	r3, r1
 8002306:	33bc      	adds	r3, #188	@ 0xbc
 8002308:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6819      	ldr	r1, [r3, #0]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	01db      	lsls	r3, r3, #7
 8002316:	440b      	add	r3, r1
 8002318:	33c0      	adds	r3, #192	@ 0xc0
 800231a:	601a      	str	r2, [r3, #0]
      break;
 800231c:	e015      	b.n	800234a <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6819      	ldr	r1, [r3, #0]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	01db      	lsls	r3, r3, #7
 800232a:	440b      	add	r3, r1
 800232c:	33c4      	adds	r3, #196	@ 0xc4
 800232e:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6819      	ldr	r1, [r3, #0]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	01db      	lsls	r3, r3, #7
 800233c:	440b      	add	r3, r1
 800233e:	33c8      	adds	r3, #200	@ 0xc8
 8002340:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8002342:	2310      	movs	r3, #16
 8002344:	61bb      	str	r3, [r7, #24]
      break;
 8002346:	e000      	b.n	800234a <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8002348:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 800234a:	22fe      	movs	r2, #254	@ 0xfe
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8002352:	43db      	mvns	r3, r3
 8002354:	69fa      	ldr	r2, [r7, #28]
 8002356:	4013      	ands	r3, r2
 8002358:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	69fa      	ldr	r2, [r7, #28]
 8002366:	4313      	orrs	r3, r2
 8002368:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	69fa      	ldr	r2, [r7, #28]
 8002376:	4313      	orrs	r3, r2
 8002378:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	691a      	ldr	r2, [r3, #16]
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	69fa      	ldr	r2, [r7, #28]
 8002386:	4313      	orrs	r3, r2
 8002388:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	695a      	ldr	r2, [r3, #20]
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	69fa      	ldr	r2, [r7, #28]
 8002396:	4313      	orrs	r3, r2
 8002398:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	699a      	ldr	r2, [r3, #24]
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	69fa      	ldr	r2, [r7, #28]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	2b08      	cmp	r3, #8
 80023b0:	d111      	bne.n	80023d6 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10c      	bne.n	80023d6 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d107      	bne.n	80023d6 <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	69da      	ldr	r2, [r3, #28]
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	69fa      	ldr	r2, [r7, #28]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	01db      	lsls	r3, r3, #7
 80023de:	4413      	add	r3, r2
 80023e0:	33e4      	adds	r3, #228	@ 0xe4
 80023e2:	69fa      	ldr	r2, [r7, #28]
 80023e4:	601a      	str	r2, [r3, #0]
}
 80023e6:	bf00      	nop
 80023e8:	3724      	adds	r7, #36	@ 0x24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	40000041 	.word	0x40000041

080023f8 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	2b05      	cmp	r3, #5
 8002406:	d851      	bhi.n	80024ac <HRTIM_ForceRegistersUpdate+0xb4>
 8002408:	a201      	add	r2, pc, #4	@ (adr r2, 8002410 <HRTIM_ForceRegistersUpdate+0x18>)
 800240a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800240e:	bf00      	nop
 8002410:	0800243f 	.word	0x0800243f
 8002414:	08002455 	.word	0x08002455
 8002418:	0800246b 	.word	0x0800246b
 800241c:	08002481 	.word	0x08002481
 8002420:	08002497 	.word	0x08002497
 8002424:	08002429 	.word	0x08002429
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f042 0201 	orr.w	r2, r2, #1
 8002438:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800243c:	e037      	b.n	80024ae <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0202 	orr.w	r2, r2, #2
 800244e:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8002452:	e02c      	b.n	80024ae <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f042 0204 	orr.w	r2, r2, #4
 8002464:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8002468:	e021      	b.n	80024ae <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0208 	orr.w	r2, r2, #8
 800247a:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800247e:	e016      	b.n	80024ae <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 0210 	orr.w	r2, r2, #16
 8002490:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8002494:	e00b      	b.n	80024ae <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0220 	orr.w	r2, r2, #32
 80024a6:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80024aa:	e000      	b.n	80024ae <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 80024ac:	bf00      	nop
  }
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop

080024bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024cc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d102      	bne.n	80024e2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	f000 bff4 	b.w	80034ca <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 816d 	beq.w	80027d2 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80024f8:	4bb4      	ldr	r3, [pc, #720]	@ (80027cc <HAL_RCC_OscConfig+0x310>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 030c 	and.w	r3, r3, #12
 8002500:	2b04      	cmp	r3, #4
 8002502:	d00c      	beq.n	800251e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002504:	4bb1      	ldr	r3, [pc, #708]	@ (80027cc <HAL_RCC_OscConfig+0x310>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 030c 	and.w	r3, r3, #12
 800250c:	2b08      	cmp	r3, #8
 800250e:	d157      	bne.n	80025c0 <HAL_RCC_OscConfig+0x104>
 8002510:	4bae      	ldr	r3, [pc, #696]	@ (80027cc <HAL_RCC_OscConfig+0x310>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800251c:	d150      	bne.n	80025c0 <HAL_RCC_OscConfig+0x104>
 800251e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002522:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002526:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800252a:	fa93 f3a3 	rbit	r3, r3
 800252e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002532:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002536:	fab3 f383 	clz	r3, r3
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b3f      	cmp	r3, #63	@ 0x3f
 800253e:	d802      	bhi.n	8002546 <HAL_RCC_OscConfig+0x8a>
 8002540:	4ba2      	ldr	r3, [pc, #648]	@ (80027cc <HAL_RCC_OscConfig+0x310>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	e015      	b.n	8002572 <HAL_RCC_OscConfig+0xb6>
 8002546:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800254a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002552:	fa93 f3a3 	rbit	r3, r3
 8002556:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800255a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800255e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002562:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002566:	fa93 f3a3 	rbit	r3, r3
 800256a:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800256e:	4b97      	ldr	r3, [pc, #604]	@ (80027cc <HAL_RCC_OscConfig+0x310>)
 8002570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002572:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002576:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800257a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800257e:	fa92 f2a2 	rbit	r2, r2
 8002582:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002586:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800258a:	fab2 f282 	clz	r2, r2
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	f042 0220 	orr.w	r2, r2, #32
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	f002 021f 	and.w	r2, r2, #31
 800259a:	2101      	movs	r1, #1
 800259c:	fa01 f202 	lsl.w	r2, r1, r2
 80025a0:	4013      	ands	r3, r2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f000 8114 	beq.w	80027d0 <HAL_RCC_OscConfig+0x314>
 80025a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f040 810b 	bne.w	80027d0 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	f000 bf85 	b.w	80034ca <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025d0:	d106      	bne.n	80025e0 <HAL_RCC_OscConfig+0x124>
 80025d2:	4b7e      	ldr	r3, [pc, #504]	@ (80027cc <HAL_RCC_OscConfig+0x310>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a7d      	ldr	r2, [pc, #500]	@ (80027cc <HAL_RCC_OscConfig+0x310>)
 80025d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	e036      	b.n	800264e <HAL_RCC_OscConfig+0x192>
 80025e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10c      	bne.n	800260a <HAL_RCC_OscConfig+0x14e>
 80025f0:	4b76      	ldr	r3, [pc, #472]	@ (80027cc <HAL_RCC_OscConfig+0x310>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a75      	ldr	r2, [pc, #468]	@ (80027cc <HAL_RCC_OscConfig+0x310>)
 80025f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025fa:	6013      	str	r3, [r2, #0]
 80025fc:	4b73      	ldr	r3, [pc, #460]	@ (80027cc <HAL_RCC_OscConfig+0x310>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a72      	ldr	r2, [pc, #456]	@ (80027cc <HAL_RCC_OscConfig+0x310>)
 8002602:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002606:	6013      	str	r3, [r2, #0]
 8002608:	e021      	b.n	800264e <HAL_RCC_OscConfig+0x192>
 800260a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800260e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800261a:	d10c      	bne.n	8002636 <HAL_RCC_OscConfig+0x17a>
 800261c:	4b6b      	ldr	r3, [pc, #428]	@ (80027cc <HAL_RCC_OscConfig+0x310>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a6a      	ldr	r2, [pc, #424]	@ (80027cc <HAL_RCC_OscConfig+0x310>)
 8002622:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002626:	6013      	str	r3, [r2, #0]
 8002628:	4b68      	ldr	r3, [pc, #416]	@ (80027cc <HAL_RCC_OscConfig+0x310>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a67      	ldr	r2, [pc, #412]	@ (80027cc <HAL_RCC_OscConfig+0x310>)
 800262e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	e00b      	b.n	800264e <HAL_RCC_OscConfig+0x192>
 8002636:	4b65      	ldr	r3, [pc, #404]	@ (80027cc <HAL_RCC_OscConfig+0x310>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a64      	ldr	r2, [pc, #400]	@ (80027cc <HAL_RCC_OscConfig+0x310>)
 800263c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	4b62      	ldr	r3, [pc, #392]	@ (80027cc <HAL_RCC_OscConfig+0x310>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a61      	ldr	r2, [pc, #388]	@ (80027cc <HAL_RCC_OscConfig+0x310>)
 8002648:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800264c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800264e:	4b5f      	ldr	r3, [pc, #380]	@ (80027cc <HAL_RCC_OscConfig+0x310>)
 8002650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002652:	f023 020f 	bic.w	r2, r3, #15
 8002656:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800265a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	495a      	ldr	r1, [pc, #360]	@ (80027cc <HAL_RCC_OscConfig+0x310>)
 8002664:	4313      	orrs	r3, r2
 8002666:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002668:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800266c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d054      	beq.n	8002722 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002678:	f7fe fa42 	bl	8000b00 <HAL_GetTick>
 800267c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002680:	e00a      	b.n	8002698 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002682:	f7fe fa3d 	bl	8000b00 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b64      	cmp	r3, #100	@ 0x64
 8002690:	d902      	bls.n	8002698 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	f000 bf19 	b.w	80034ca <HAL_RCC_OscConfig+0x100e>
 8002698:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800269c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80026a4:	fa93 f3a3 	rbit	r3, r3
 80026a8:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80026ac:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b0:	fab3 f383 	clz	r3, r3
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b3f      	cmp	r3, #63	@ 0x3f
 80026b8:	d802      	bhi.n	80026c0 <HAL_RCC_OscConfig+0x204>
 80026ba:	4b44      	ldr	r3, [pc, #272]	@ (80027cc <HAL_RCC_OscConfig+0x310>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	e015      	b.n	80026ec <HAL_RCC_OscConfig+0x230>
 80026c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026c4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80026cc:	fa93 f3a3 	rbit	r3, r3
 80026d0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80026d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026d8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80026dc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80026e0:	fa93 f3a3 	rbit	r3, r3
 80026e4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80026e8:	4b38      	ldr	r3, [pc, #224]	@ (80027cc <HAL_RCC_OscConfig+0x310>)
 80026ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80026f0:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80026f4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80026f8:	fa92 f2a2 	rbit	r2, r2
 80026fc:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002700:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002704:	fab2 f282 	clz	r2, r2
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	f042 0220 	orr.w	r2, r2, #32
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	f002 021f 	and.w	r2, r2, #31
 8002714:	2101      	movs	r1, #1
 8002716:	fa01 f202 	lsl.w	r2, r1, r2
 800271a:	4013      	ands	r3, r2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0b0      	beq.n	8002682 <HAL_RCC_OscConfig+0x1c6>
 8002720:	e057      	b.n	80027d2 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002722:	f7fe f9ed 	bl	8000b00 <HAL_GetTick>
 8002726:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800272a:	e00a      	b.n	8002742 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800272c:	f7fe f9e8 	bl	8000b00 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b64      	cmp	r3, #100	@ 0x64
 800273a:	d902      	bls.n	8002742 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	f000 bec4 	b.w	80034ca <HAL_RCC_OscConfig+0x100e>
 8002742:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002746:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800274e:	fa93 f3a3 	rbit	r3, r3
 8002752:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002756:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800275a:	fab3 f383 	clz	r3, r3
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b3f      	cmp	r3, #63	@ 0x3f
 8002762:	d802      	bhi.n	800276a <HAL_RCC_OscConfig+0x2ae>
 8002764:	4b19      	ldr	r3, [pc, #100]	@ (80027cc <HAL_RCC_OscConfig+0x310>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	e015      	b.n	8002796 <HAL_RCC_OscConfig+0x2da>
 800276a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800276e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002772:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002776:	fa93 f3a3 	rbit	r3, r3
 800277a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800277e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002782:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002786:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800278a:	fa93 f3a3 	rbit	r3, r3
 800278e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002792:	4b0e      	ldr	r3, [pc, #56]	@ (80027cc <HAL_RCC_OscConfig+0x310>)
 8002794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002796:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800279a:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800279e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80027a2:	fa92 f2a2 	rbit	r2, r2
 80027a6:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80027aa:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80027ae:	fab2 f282 	clz	r2, r2
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	f042 0220 	orr.w	r2, r2, #32
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	f002 021f 	and.w	r2, r2, #31
 80027be:	2101      	movs	r1, #1
 80027c0:	fa01 f202 	lsl.w	r2, r1, r2
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1b0      	bne.n	800272c <HAL_RCC_OscConfig+0x270>
 80027ca:	e002      	b.n	80027d2 <HAL_RCC_OscConfig+0x316>
 80027cc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 816c 	beq.w	8002ac0 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80027e8:	4bcc      	ldr	r3, [pc, #816]	@ (8002b1c <HAL_RCC_OscConfig+0x660>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 030c 	and.w	r3, r3, #12
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00b      	beq.n	800280c <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80027f4:	4bc9      	ldr	r3, [pc, #804]	@ (8002b1c <HAL_RCC_OscConfig+0x660>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 030c 	and.w	r3, r3, #12
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d16d      	bne.n	80028dc <HAL_RCC_OscConfig+0x420>
 8002800:	4bc6      	ldr	r3, [pc, #792]	@ (8002b1c <HAL_RCC_OscConfig+0x660>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d167      	bne.n	80028dc <HAL_RCC_OscConfig+0x420>
 800280c:	2302      	movs	r3, #2
 800280e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002816:	fa93 f3a3 	rbit	r3, r3
 800281a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800281e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002822:	fab3 f383 	clz	r3, r3
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b3f      	cmp	r3, #63	@ 0x3f
 800282a:	d802      	bhi.n	8002832 <HAL_RCC_OscConfig+0x376>
 800282c:	4bbb      	ldr	r3, [pc, #748]	@ (8002b1c <HAL_RCC_OscConfig+0x660>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	e013      	b.n	800285a <HAL_RCC_OscConfig+0x39e>
 8002832:	2302      	movs	r3, #2
 8002834:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002838:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800283c:	fa93 f3a3 	rbit	r3, r3
 8002840:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002844:	2302      	movs	r3, #2
 8002846:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800284a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800284e:	fa93 f3a3 	rbit	r3, r3
 8002852:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002856:	4bb1      	ldr	r3, [pc, #708]	@ (8002b1c <HAL_RCC_OscConfig+0x660>)
 8002858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285a:	2202      	movs	r2, #2
 800285c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002860:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002864:	fa92 f2a2 	rbit	r2, r2
 8002868:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800286c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002870:	fab2 f282 	clz	r2, r2
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	f042 0220 	orr.w	r2, r2, #32
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	f002 021f 	and.w	r2, r2, #31
 8002880:	2101      	movs	r1, #1
 8002882:	fa01 f202 	lsl.w	r2, r1, r2
 8002886:	4013      	ands	r3, r2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00a      	beq.n	80028a2 <HAL_RCC_OscConfig+0x3e6>
 800288c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002890:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d002      	beq.n	80028a2 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	f000 be14 	b.w	80034ca <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a2:	4b9e      	ldr	r3, [pc, #632]	@ (8002b1c <HAL_RCC_OscConfig+0x660>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	21f8      	movs	r1, #248	@ 0xf8
 80028b8:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80028c0:	fa91 f1a1 	rbit	r1, r1
 80028c4:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80028c8:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80028cc:	fab1 f181 	clz	r1, r1
 80028d0:	b2c9      	uxtb	r1, r1
 80028d2:	408b      	lsls	r3, r1
 80028d4:	4991      	ldr	r1, [pc, #580]	@ (8002b1c <HAL_RCC_OscConfig+0x660>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028da:	e0f1      	b.n	8002ac0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 8083 	beq.w	80029f4 <HAL_RCC_OscConfig+0x538>
 80028ee:	2301      	movs	r3, #1
 80028f0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80028f8:	fa93 f3a3 	rbit	r3, r3
 80028fc:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002900:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002904:	fab3 f383 	clz	r3, r3
 8002908:	b2db      	uxtb	r3, r3
 800290a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800290e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	461a      	mov	r2, r3
 8002916:	2301      	movs	r3, #1
 8002918:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291a:	f7fe f8f1 	bl	8000b00 <HAL_GetTick>
 800291e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002922:	e00a      	b.n	800293a <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002924:	f7fe f8ec 	bl	8000b00 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d902      	bls.n	800293a <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	f000 bdc8 	b.w	80034ca <HAL_RCC_OscConfig+0x100e>
 800293a:	2302      	movs	r3, #2
 800293c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002940:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002944:	fa93 f3a3 	rbit	r3, r3
 8002948:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800294c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002950:	fab3 f383 	clz	r3, r3
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b3f      	cmp	r3, #63	@ 0x3f
 8002958:	d802      	bhi.n	8002960 <HAL_RCC_OscConfig+0x4a4>
 800295a:	4b70      	ldr	r3, [pc, #448]	@ (8002b1c <HAL_RCC_OscConfig+0x660>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	e013      	b.n	8002988 <HAL_RCC_OscConfig+0x4cc>
 8002960:	2302      	movs	r3, #2
 8002962:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002966:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800296a:	fa93 f3a3 	rbit	r3, r3
 800296e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002972:	2302      	movs	r3, #2
 8002974:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002978:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800297c:	fa93 f3a3 	rbit	r3, r3
 8002980:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002984:	4b65      	ldr	r3, [pc, #404]	@ (8002b1c <HAL_RCC_OscConfig+0x660>)
 8002986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002988:	2202      	movs	r2, #2
 800298a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800298e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002992:	fa92 f2a2 	rbit	r2, r2
 8002996:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800299a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800299e:	fab2 f282 	clz	r2, r2
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	f042 0220 	orr.w	r2, r2, #32
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	f002 021f 	and.w	r2, r2, #31
 80029ae:	2101      	movs	r1, #1
 80029b0:	fa01 f202 	lsl.w	r2, r1, r2
 80029b4:	4013      	ands	r3, r2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0b4      	beq.n	8002924 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ba:	4b58      	ldr	r3, [pc, #352]	@ (8002b1c <HAL_RCC_OscConfig+0x660>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	21f8      	movs	r1, #248	@ 0xf8
 80029d0:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80029d8:	fa91 f1a1 	rbit	r1, r1
 80029dc:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80029e0:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80029e4:	fab1 f181 	clz	r1, r1
 80029e8:	b2c9      	uxtb	r1, r1
 80029ea:	408b      	lsls	r3, r1
 80029ec:	494b      	ldr	r1, [pc, #300]	@ (8002b1c <HAL_RCC_OscConfig+0x660>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	600b      	str	r3, [r1, #0]
 80029f2:	e065      	b.n	8002ac0 <HAL_RCC_OscConfig+0x604>
 80029f4:	2301      	movs	r3, #1
 80029f6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002a06:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a0a:	fab3 f383 	clz	r3, r3
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a14:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a20:	f7fe f86e 	bl	8000b00 <HAL_GetTick>
 8002a24:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a28:	e00a      	b.n	8002a40 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a2a:	f7fe f869 	bl	8000b00 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d902      	bls.n	8002a40 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	f000 bd45 	b.w	80034ca <HAL_RCC_OscConfig+0x100e>
 8002a40:	2302      	movs	r3, #2
 8002a42:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a46:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002a4a:	fa93 f3a3 	rbit	r3, r3
 8002a4e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002a52:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a56:	fab3 f383 	clz	r3, r3
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a5e:	d802      	bhi.n	8002a66 <HAL_RCC_OscConfig+0x5aa>
 8002a60:	4b2e      	ldr	r3, [pc, #184]	@ (8002b1c <HAL_RCC_OscConfig+0x660>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	e013      	b.n	8002a8e <HAL_RCC_OscConfig+0x5d2>
 8002a66:	2302      	movs	r3, #2
 8002a68:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002a70:	fa93 f3a3 	rbit	r3, r3
 8002a74:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002a78:	2302      	movs	r3, #2
 8002a7a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002a7e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002a82:	fa93 f3a3 	rbit	r3, r3
 8002a86:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002a8a:	4b24      	ldr	r3, [pc, #144]	@ (8002b1c <HAL_RCC_OscConfig+0x660>)
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8e:	2202      	movs	r2, #2
 8002a90:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002a94:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002a98:	fa92 f2a2 	rbit	r2, r2
 8002a9c:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002aa0:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002aa4:	fab2 f282 	clz	r2, r2
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	f042 0220 	orr.w	r2, r2, #32
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	f002 021f 	and.w	r2, r2, #31
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8002aba:	4013      	ands	r3, r2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1b4      	bne.n	8002a2a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ac0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 8115 	beq.w	8002d00 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ad6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ada:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d07e      	beq.n	8002be4 <HAL_RCC_OscConfig+0x728>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aec:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002af0:	fa93 f3a3 	rbit	r3, r3
 8002af4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002afc:	fab3 f383 	clz	r3, r3
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	461a      	mov	r2, r3
 8002b04:	4b06      	ldr	r3, [pc, #24]	@ (8002b20 <HAL_RCC_OscConfig+0x664>)
 8002b06:	4413      	add	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b10:	f7fd fff6 	bl	8000b00 <HAL_GetTick>
 8002b14:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b18:	e00f      	b.n	8002b3a <HAL_RCC_OscConfig+0x67e>
 8002b1a:	bf00      	nop
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b24:	f7fd ffec 	bl	8000b00 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d902      	bls.n	8002b3a <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	f000 bcc8 	b.w	80034ca <HAL_RCC_OscConfig+0x100e>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b40:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002b44:	fa93 f3a3 	rbit	r3, r3
 8002b48:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002b4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b50:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002b54:	2202      	movs	r2, #2
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b5c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	fa93 f2a3 	rbit	r2, r3
 8002b66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002b78:	2202      	movs	r2, #2
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	fa93 f2a3 	rbit	r2, r3
 8002b8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b8e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002b92:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b94:	4bb0      	ldr	r3, [pc, #704]	@ (8002e58 <HAL_RCC_OscConfig+0x99c>)
 8002b96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b9c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002ba0:	2102      	movs	r1, #2
 8002ba2:	6019      	str	r1, [r3, #0]
 8002ba4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ba8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	fa93 f1a3 	rbit	r1, r3
 8002bb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002bba:	6019      	str	r1, [r3, #0]
  return result;
 8002bbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bc0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	fab3 f383 	clz	r3, r3
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	f003 031f 	and.w	r3, r3, #31
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bdc:	4013      	ands	r3, r2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0a0      	beq.n	8002b24 <HAL_RCC_OscConfig+0x668>
 8002be2:	e08d      	b.n	8002d00 <HAL_RCC_OscConfig+0x844>
 8002be4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002bec:	2201      	movs	r2, #1
 8002bee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	fa93 f2a3 	rbit	r2, r3
 8002bfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c02:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002c06:	601a      	str	r2, [r3, #0]
  return result;
 8002c08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c0c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002c10:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c12:	fab3 f383 	clz	r3, r3
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4b90      	ldr	r3, [pc, #576]	@ (8002e5c <HAL_RCC_OscConfig+0x9a0>)
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	461a      	mov	r2, r3
 8002c22:	2300      	movs	r3, #0
 8002c24:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c26:	f7fd ff6b 	bl	8000b00 <HAL_GetTick>
 8002c2a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c2e:	e00a      	b.n	8002c46 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c30:	f7fd ff66 	bl	8000b00 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d902      	bls.n	8002c46 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	f000 bc42 	b.w	80034ca <HAL_RCC_OscConfig+0x100e>
 8002c46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c4a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002c4e:	2202      	movs	r2, #2
 8002c50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c56:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	fa93 f2a3 	rbit	r2, r3
 8002c60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c64:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c6e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002c72:	2202      	movs	r2, #2
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c7a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	fa93 f2a3 	rbit	r2, r3
 8002c84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c88:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c92:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002c96:	2202      	movs	r2, #2
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c9e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	fa93 f2a3 	rbit	r2, r3
 8002ca8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cac:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002cb0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb2:	4b69      	ldr	r3, [pc, #420]	@ (8002e58 <HAL_RCC_OscConfig+0x99c>)
 8002cb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cba:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002cbe:	2102      	movs	r1, #2
 8002cc0:	6019      	str	r1, [r3, #0]
 8002cc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cc6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	fa93 f1a3 	rbit	r1, r3
 8002cd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cd8:	6019      	str	r1, [r3, #0]
  return result;
 8002cda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cde:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	fab3 f383 	clz	r3, r3
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	f003 031f 	and.w	r3, r3, #31
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d197      	bne.n	8002c30 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d04:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 819e 	beq.w	8003052 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d16:	2300      	movs	r3, #0
 8002d18:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d1c:	4b4e      	ldr	r3, [pc, #312]	@ (8002e58 <HAL_RCC_OscConfig+0x99c>)
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d116      	bne.n	8002d56 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d28:	4b4b      	ldr	r3, [pc, #300]	@ (8002e58 <HAL_RCC_OscConfig+0x99c>)
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	4a4a      	ldr	r2, [pc, #296]	@ (8002e58 <HAL_RCC_OscConfig+0x99c>)
 8002d2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d32:	61d3      	str	r3, [r2, #28]
 8002d34:	4b48      	ldr	r3, [pc, #288]	@ (8002e58 <HAL_RCC_OscConfig+0x99c>)
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002d3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d40:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d4a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002d4e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002d50:	2301      	movs	r3, #1
 8002d52:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d56:	4b42      	ldr	r3, [pc, #264]	@ (8002e60 <HAL_RCC_OscConfig+0x9a4>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d11a      	bne.n	8002d98 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d62:	4b3f      	ldr	r3, [pc, #252]	@ (8002e60 <HAL_RCC_OscConfig+0x9a4>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a3e      	ldr	r2, [pc, #248]	@ (8002e60 <HAL_RCC_OscConfig+0x9a4>)
 8002d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d6c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d6e:	f7fd fec7 	bl	8000b00 <HAL_GetTick>
 8002d72:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d76:	e009      	b.n	8002d8c <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d78:	f7fd fec2 	bl	8000b00 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b64      	cmp	r3, #100	@ 0x64
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e39e      	b.n	80034ca <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8c:	4b34      	ldr	r3, [pc, #208]	@ (8002e60 <HAL_RCC_OscConfig+0x9a4>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0ef      	beq.n	8002d78 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d9c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d106      	bne.n	8002db6 <HAL_RCC_OscConfig+0x8fa>
 8002da8:	4b2b      	ldr	r3, [pc, #172]	@ (8002e58 <HAL_RCC_OscConfig+0x99c>)
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	4a2a      	ldr	r2, [pc, #168]	@ (8002e58 <HAL_RCC_OscConfig+0x99c>)
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	6213      	str	r3, [r2, #32]
 8002db4:	e035      	b.n	8002e22 <HAL_RCC_OscConfig+0x966>
 8002db6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10c      	bne.n	8002de0 <HAL_RCC_OscConfig+0x924>
 8002dc6:	4b24      	ldr	r3, [pc, #144]	@ (8002e58 <HAL_RCC_OscConfig+0x99c>)
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	4a23      	ldr	r2, [pc, #140]	@ (8002e58 <HAL_RCC_OscConfig+0x99c>)
 8002dcc:	f023 0301 	bic.w	r3, r3, #1
 8002dd0:	6213      	str	r3, [r2, #32]
 8002dd2:	4b21      	ldr	r3, [pc, #132]	@ (8002e58 <HAL_RCC_OscConfig+0x99c>)
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	4a20      	ldr	r2, [pc, #128]	@ (8002e58 <HAL_RCC_OscConfig+0x99c>)
 8002dd8:	f023 0304 	bic.w	r3, r3, #4
 8002ddc:	6213      	str	r3, [r2, #32]
 8002dde:	e020      	b.n	8002e22 <HAL_RCC_OscConfig+0x966>
 8002de0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	2b05      	cmp	r3, #5
 8002dee:	d10c      	bne.n	8002e0a <HAL_RCC_OscConfig+0x94e>
 8002df0:	4b19      	ldr	r3, [pc, #100]	@ (8002e58 <HAL_RCC_OscConfig+0x99c>)
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	4a18      	ldr	r2, [pc, #96]	@ (8002e58 <HAL_RCC_OscConfig+0x99c>)
 8002df6:	f043 0304 	orr.w	r3, r3, #4
 8002dfa:	6213      	str	r3, [r2, #32]
 8002dfc:	4b16      	ldr	r3, [pc, #88]	@ (8002e58 <HAL_RCC_OscConfig+0x99c>)
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	4a15      	ldr	r2, [pc, #84]	@ (8002e58 <HAL_RCC_OscConfig+0x99c>)
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	6213      	str	r3, [r2, #32]
 8002e08:	e00b      	b.n	8002e22 <HAL_RCC_OscConfig+0x966>
 8002e0a:	4b13      	ldr	r3, [pc, #76]	@ (8002e58 <HAL_RCC_OscConfig+0x99c>)
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	4a12      	ldr	r2, [pc, #72]	@ (8002e58 <HAL_RCC_OscConfig+0x99c>)
 8002e10:	f023 0301 	bic.w	r3, r3, #1
 8002e14:	6213      	str	r3, [r2, #32]
 8002e16:	4b10      	ldr	r3, [pc, #64]	@ (8002e58 <HAL_RCC_OscConfig+0x99c>)
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	4a0f      	ldr	r2, [pc, #60]	@ (8002e58 <HAL_RCC_OscConfig+0x99c>)
 8002e1c:	f023 0304 	bic.w	r3, r3, #4
 8002e20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 8087 	beq.w	8002f42 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e34:	f7fd fe64 	bl	8000b00 <HAL_GetTick>
 8002e38:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e3c:	e012      	b.n	8002e64 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e3e:	f7fd fe5f 	bl	8000b00 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d908      	bls.n	8002e64 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e339      	b.n	80034ca <HAL_RCC_OscConfig+0x100e>
 8002e56:	bf00      	nop
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	10908120 	.word	0x10908120
 8002e60:	40007000 	.word	0x40007000
 8002e64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e68:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e74:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	fa93 f2a3 	rbit	r2, r3
 8002e7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e82:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e8c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002e90:	2202      	movs	r2, #2
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e98:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	fa93 f2a3 	rbit	r2, r3
 8002ea2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ea6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002eaa:	601a      	str	r2, [r3, #0]
  return result;
 8002eac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002eb4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb6:	fab3 f383 	clz	r3, r3
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d102      	bne.n	8002ecc <HAL_RCC_OscConfig+0xa10>
 8002ec6:	4b98      	ldr	r3, [pc, #608]	@ (8003128 <HAL_RCC_OscConfig+0xc6c>)
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	e013      	b.n	8002ef4 <HAL_RCC_OscConfig+0xa38>
 8002ecc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ed0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002edc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	fa93 f2a3 	rbit	r2, r3
 8002ee6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eea:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	4b8d      	ldr	r3, [pc, #564]	@ (8003128 <HAL_RCC_OscConfig+0xc6c>)
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ef8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002efc:	2102      	movs	r1, #2
 8002efe:	6011      	str	r1, [r2, #0]
 8002f00:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f04:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	fa92 f1a2 	rbit	r1, r2
 8002f0e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f12:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002f16:	6011      	str	r1, [r2, #0]
  return result;
 8002f18:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f1c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002f20:	6812      	ldr	r2, [r2, #0]
 8002f22:	fab2 f282 	clz	r2, r2
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	f002 021f 	and.w	r2, r2, #31
 8002f32:	2101      	movs	r1, #1
 8002f34:	fa01 f202 	lsl.w	r2, r1, r2
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f43f af7f 	beq.w	8002e3e <HAL_RCC_OscConfig+0x982>
 8002f40:	e07d      	b.n	800303e <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f42:	f7fd fddd 	bl	8000b00 <HAL_GetTick>
 8002f46:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f4a:	e00b      	b.n	8002f64 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f4c:	f7fd fdd8 	bl	8000b00 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e2b2      	b.n	80034ca <HAL_RCC_OscConfig+0x100e>
 8002f64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f68:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f74:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	fa93 f2a3 	rbit	r2, r3
 8002f7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f82:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f8c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002f90:	2202      	movs	r2, #2
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f98:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	fa93 f2a3 	rbit	r2, r3
 8002fa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002faa:	601a      	str	r2, [r3, #0]
  return result;
 8002fac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fb0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002fb4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fb6:	fab3 f383 	clz	r3, r3
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d102      	bne.n	8002fcc <HAL_RCC_OscConfig+0xb10>
 8002fc6:	4b58      	ldr	r3, [pc, #352]	@ (8003128 <HAL_RCC_OscConfig+0xc6c>)
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	e013      	b.n	8002ff4 <HAL_RCC_OscConfig+0xb38>
 8002fcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fd0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fdc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	fa93 f2a3 	rbit	r2, r3
 8002fe6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fea:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	4b4d      	ldr	r3, [pc, #308]	@ (8003128 <HAL_RCC_OscConfig+0xc6c>)
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ff8:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002ffc:	2102      	movs	r1, #2
 8002ffe:	6011      	str	r1, [r2, #0]
 8003000:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003004:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003008:	6812      	ldr	r2, [r2, #0]
 800300a:	fa92 f1a2 	rbit	r1, r2
 800300e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003012:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003016:	6011      	str	r1, [r2, #0]
  return result;
 8003018:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800301c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003020:	6812      	ldr	r2, [r2, #0]
 8003022:	fab2 f282 	clz	r2, r2
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800302c:	b2d2      	uxtb	r2, r2
 800302e:	f002 021f 	and.w	r2, r2, #31
 8003032:	2101      	movs	r1, #1
 8003034:	fa01 f202 	lsl.w	r2, r1, r2
 8003038:	4013      	ands	r3, r2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d186      	bne.n	8002f4c <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800303e:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003042:	2b01      	cmp	r3, #1
 8003044:	d105      	bne.n	8003052 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003046:	4b38      	ldr	r3, [pc, #224]	@ (8003128 <HAL_RCC_OscConfig+0xc6c>)
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	4a37      	ldr	r2, [pc, #220]	@ (8003128 <HAL_RCC_OscConfig+0xc6c>)
 800304c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003050:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003052:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003056:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 8232 	beq.w	80034c8 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003064:	4b30      	ldr	r3, [pc, #192]	@ (8003128 <HAL_RCC_OscConfig+0xc6c>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 030c 	and.w	r3, r3, #12
 800306c:	2b08      	cmp	r3, #8
 800306e:	f000 8201 	beq.w	8003474 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003072:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003076:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	2b02      	cmp	r3, #2
 8003080:	f040 8157 	bne.w	8003332 <HAL_RCC_OscConfig+0xe76>
 8003084:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003088:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800308c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003090:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003092:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003096:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	fa93 f2a3 	rbit	r2, r3
 80030a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80030a8:	601a      	str	r2, [r3, #0]
  return result;
 80030aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ae:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80030b2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b4:	fab3 f383 	clz	r3, r3
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80030be:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	461a      	mov	r2, r3
 80030c6:	2300      	movs	r3, #0
 80030c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ca:	f7fd fd19 	bl	8000b00 <HAL_GetTick>
 80030ce:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030d2:	e009      	b.n	80030e8 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d4:	f7fd fd14 	bl	8000b00 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e1f0      	b.n	80034ca <HAL_RCC_OscConfig+0x100e>
 80030e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ec:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80030f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030fa:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	fa93 f2a3 	rbit	r2, r3
 8003104:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003108:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800310c:	601a      	str	r2, [r3, #0]
  return result;
 800310e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003112:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003116:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003118:	fab3 f383 	clz	r3, r3
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003120:	d804      	bhi.n	800312c <HAL_RCC_OscConfig+0xc70>
 8003122:	4b01      	ldr	r3, [pc, #4]	@ (8003128 <HAL_RCC_OscConfig+0xc6c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	e029      	b.n	800317c <HAL_RCC_OscConfig+0xcc0>
 8003128:	40021000 	.word	0x40021000
 800312c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003130:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003134:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003138:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800313e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	fa93 f2a3 	rbit	r2, r3
 8003148:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800314c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003156:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800315a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003164:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	fa93 f2a3 	rbit	r2, r3
 800316e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003172:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	4bc3      	ldr	r3, [pc, #780]	@ (8003488 <HAL_RCC_OscConfig+0xfcc>)
 800317a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003180:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003184:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003188:	6011      	str	r1, [r2, #0]
 800318a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800318e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003192:	6812      	ldr	r2, [r2, #0]
 8003194:	fa92 f1a2 	rbit	r1, r2
 8003198:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800319c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80031a0:	6011      	str	r1, [r2, #0]
  return result;
 80031a2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031a6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80031aa:	6812      	ldr	r2, [r2, #0]
 80031ac:	fab2 f282 	clz	r2, r2
 80031b0:	b2d2      	uxtb	r2, r2
 80031b2:	f042 0220 	orr.w	r2, r2, #32
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	f002 021f 	and.w	r2, r2, #31
 80031bc:	2101      	movs	r1, #1
 80031be:	fa01 f202 	lsl.w	r2, r1, r2
 80031c2:	4013      	ands	r3, r2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d185      	bne.n	80030d4 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031c8:	4baf      	ldr	r3, [pc, #700]	@ (8003488 <HAL_RCC_OscConfig+0xfcc>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80031d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80031dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	430b      	orrs	r3, r1
 80031ea:	49a7      	ldr	r1, [pc, #668]	@ (8003488 <HAL_RCC_OscConfig+0xfcc>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	604b      	str	r3, [r1, #4]
 80031f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80031f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80031fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003202:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	fa93 f2a3 	rbit	r2, r3
 800320c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003210:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003214:	601a      	str	r2, [r3, #0]
  return result;
 8003216:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800321a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800321e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003220:	fab3 f383 	clz	r3, r3
 8003224:	b2db      	uxtb	r3, r3
 8003226:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800322a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	461a      	mov	r2, r3
 8003232:	2301      	movs	r3, #1
 8003234:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003236:	f7fd fc63 	bl	8000b00 <HAL_GetTick>
 800323a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800323e:	e009      	b.n	8003254 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003240:	f7fd fc5e 	bl	8000b00 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e13a      	b.n	80034ca <HAL_RCC_OscConfig+0x100e>
 8003254:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003258:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800325c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003260:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003262:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003266:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	fa93 f2a3 	rbit	r2, r3
 8003270:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003274:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003278:	601a      	str	r2, [r3, #0]
  return result;
 800327a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800327e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003282:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003284:	fab3 f383 	clz	r3, r3
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b3f      	cmp	r3, #63	@ 0x3f
 800328c:	d802      	bhi.n	8003294 <HAL_RCC_OscConfig+0xdd8>
 800328e:	4b7e      	ldr	r3, [pc, #504]	@ (8003488 <HAL_RCC_OscConfig+0xfcc>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	e027      	b.n	80032e4 <HAL_RCC_OscConfig+0xe28>
 8003294:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003298:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800329c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	fa93 f2a3 	rbit	r2, r3
 80032b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032b4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032be:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80032c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032cc:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	fa93 f2a3 	rbit	r2, r3
 80032d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032da:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	4b69      	ldr	r3, [pc, #420]	@ (8003488 <HAL_RCC_OscConfig+0xfcc>)
 80032e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032e8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80032ec:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80032f0:	6011      	str	r1, [r2, #0]
 80032f2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032f6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	fa92 f1a2 	rbit	r1, r2
 8003300:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003304:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003308:	6011      	str	r1, [r2, #0]
  return result;
 800330a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800330e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003312:	6812      	ldr	r2, [r2, #0]
 8003314:	fab2 f282 	clz	r2, r2
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	f042 0220 	orr.w	r2, r2, #32
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	f002 021f 	and.w	r2, r2, #31
 8003324:	2101      	movs	r1, #1
 8003326:	fa01 f202 	lsl.w	r2, r1, r2
 800332a:	4013      	ands	r3, r2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d087      	beq.n	8003240 <HAL_RCC_OscConfig+0xd84>
 8003330:	e0ca      	b.n	80034c8 <HAL_RCC_OscConfig+0x100c>
 8003332:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003336:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800333a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800333e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003340:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003344:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	fa93 f2a3 	rbit	r2, r3
 800334e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003352:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003356:	601a      	str	r2, [r3, #0]
  return result;
 8003358:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800335c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003360:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003362:	fab3 f383 	clz	r3, r3
 8003366:	b2db      	uxtb	r3, r3
 8003368:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800336c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	461a      	mov	r2, r3
 8003374:	2300      	movs	r3, #0
 8003376:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003378:	f7fd fbc2 	bl	8000b00 <HAL_GetTick>
 800337c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003380:	e009      	b.n	8003396 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003382:	f7fd fbbd 	bl	8000b00 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e099      	b.n	80034ca <HAL_RCC_OscConfig+0x100e>
 8003396:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800339a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800339e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	fa93 f2a3 	rbit	r2, r3
 80033b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033b6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80033ba:	601a      	str	r2, [r3, #0]
  return result;
 80033bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033c0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80033c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033c6:	fab3 f383 	clz	r3, r3
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b3f      	cmp	r3, #63	@ 0x3f
 80033ce:	d802      	bhi.n	80033d6 <HAL_RCC_OscConfig+0xf1a>
 80033d0:	4b2d      	ldr	r3, [pc, #180]	@ (8003488 <HAL_RCC_OscConfig+0xfcc>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	e027      	b.n	8003426 <HAL_RCC_OscConfig+0xf6a>
 80033d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033da:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80033de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	fa93 f2a3 	rbit	r2, r3
 80033f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003400:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003404:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800340e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	fa93 f2a3 	rbit	r2, r3
 8003418:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800341c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	4b19      	ldr	r3, [pc, #100]	@ (8003488 <HAL_RCC_OscConfig+0xfcc>)
 8003424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003426:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800342a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800342e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003432:	6011      	str	r1, [r2, #0]
 8003434:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003438:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800343c:	6812      	ldr	r2, [r2, #0]
 800343e:	fa92 f1a2 	rbit	r1, r2
 8003442:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003446:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800344a:	6011      	str	r1, [r2, #0]
  return result;
 800344c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003450:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003454:	6812      	ldr	r2, [r2, #0]
 8003456:	fab2 f282 	clz	r2, r2
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	f042 0220 	orr.w	r2, r2, #32
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	f002 021f 	and.w	r2, r2, #31
 8003466:	2101      	movs	r1, #1
 8003468:	fa01 f202 	lsl.w	r2, r1, r2
 800346c:	4013      	ands	r3, r2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d187      	bne.n	8003382 <HAL_RCC_OscConfig+0xec6>
 8003472:	e029      	b.n	80034c8 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003474:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003478:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d103      	bne.n	800348c <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e020      	b.n	80034ca <HAL_RCC_OscConfig+0x100e>
 8003488:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800348c:	4b11      	ldr	r3, [pc, #68]	@ (80034d4 <HAL_RCC_OscConfig+0x1018>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003494:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003498:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800349c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d10b      	bne.n	80034c4 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80034ac:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80034b0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80034b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d001      	beq.n	80034c8 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e000      	b.n	80034ca <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40021000 	.word	0x40021000

080034d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b09e      	sub	sp, #120	@ 0x78
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80034e2:	2300      	movs	r3, #0
 80034e4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e154      	b.n	800379a <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034f0:	4b89      	ldr	r3, [pc, #548]	@ (8003718 <HAL_RCC_ClockConfig+0x240>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d910      	bls.n	8003520 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034fe:	4b86      	ldr	r3, [pc, #536]	@ (8003718 <HAL_RCC_ClockConfig+0x240>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f023 0207 	bic.w	r2, r3, #7
 8003506:	4984      	ldr	r1, [pc, #528]	@ (8003718 <HAL_RCC_ClockConfig+0x240>)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	4313      	orrs	r3, r2
 800350c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800350e:	4b82      	ldr	r3, [pc, #520]	@ (8003718 <HAL_RCC_ClockConfig+0x240>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	429a      	cmp	r2, r3
 800351a:	d001      	beq.n	8003520 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e13c      	b.n	800379a <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d008      	beq.n	800353e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800352c:	4b7b      	ldr	r3, [pc, #492]	@ (800371c <HAL_RCC_ClockConfig+0x244>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	4978      	ldr	r1, [pc, #480]	@ (800371c <HAL_RCC_ClockConfig+0x244>)
 800353a:	4313      	orrs	r3, r2
 800353c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 80cd 	beq.w	80036e6 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d137      	bne.n	80035c4 <HAL_RCC_ClockConfig+0xec>
 8003554:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003558:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800355c:	fa93 f3a3 	rbit	r3, r3
 8003560:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003562:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003564:	fab3 f383 	clz	r3, r3
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b3f      	cmp	r3, #63	@ 0x3f
 800356c:	d802      	bhi.n	8003574 <HAL_RCC_ClockConfig+0x9c>
 800356e:	4b6b      	ldr	r3, [pc, #428]	@ (800371c <HAL_RCC_ClockConfig+0x244>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	e00f      	b.n	8003594 <HAL_RCC_ClockConfig+0xbc>
 8003574:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003578:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800357c:	fa93 f3a3 	rbit	r3, r3
 8003580:	667b      	str	r3, [r7, #100]	@ 0x64
 8003582:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003586:	663b      	str	r3, [r7, #96]	@ 0x60
 8003588:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800358a:	fa93 f3a3 	rbit	r3, r3
 800358e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003590:	4b62      	ldr	r3, [pc, #392]	@ (800371c <HAL_RCC_ClockConfig+0x244>)
 8003592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003594:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003598:	65ba      	str	r2, [r7, #88]	@ 0x58
 800359a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800359c:	fa92 f2a2 	rbit	r2, r2
 80035a0:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80035a2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80035a4:	fab2 f282 	clz	r2, r2
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	f042 0220 	orr.w	r2, r2, #32
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	f002 021f 	and.w	r2, r2, #31
 80035b4:	2101      	movs	r1, #1
 80035b6:	fa01 f202 	lsl.w	r2, r1, r2
 80035ba:	4013      	ands	r3, r2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d171      	bne.n	80036a4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e0ea      	b.n	800379a <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d137      	bne.n	800363c <HAL_RCC_ClockConfig+0x164>
 80035cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035d0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035d4:	fa93 f3a3 	rbit	r3, r3
 80035d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80035da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035dc:	fab3 f383 	clz	r3, r3
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80035e4:	d802      	bhi.n	80035ec <HAL_RCC_ClockConfig+0x114>
 80035e6:	4b4d      	ldr	r3, [pc, #308]	@ (800371c <HAL_RCC_ClockConfig+0x244>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	e00f      	b.n	800360c <HAL_RCC_ClockConfig+0x134>
 80035ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035f4:	fa93 f3a3 	rbit	r3, r3
 80035f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80035fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8003600:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003602:	fa93 f3a3 	rbit	r3, r3
 8003606:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003608:	4b44      	ldr	r3, [pc, #272]	@ (800371c <HAL_RCC_ClockConfig+0x244>)
 800360a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003610:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003612:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003614:	fa92 f2a2 	rbit	r2, r2
 8003618:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800361a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800361c:	fab2 f282 	clz	r2, r2
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	f042 0220 	orr.w	r2, r2, #32
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	f002 021f 	and.w	r2, r2, #31
 800362c:	2101      	movs	r1, #1
 800362e:	fa01 f202 	lsl.w	r2, r1, r2
 8003632:	4013      	ands	r3, r2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d135      	bne.n	80036a4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e0ae      	b.n	800379a <HAL_RCC_ClockConfig+0x2c2>
 800363c:	2302      	movs	r3, #2
 800363e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003642:	fa93 f3a3 	rbit	r3, r3
 8003646:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800364a:	fab3 f383 	clz	r3, r3
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b3f      	cmp	r3, #63	@ 0x3f
 8003652:	d802      	bhi.n	800365a <HAL_RCC_ClockConfig+0x182>
 8003654:	4b31      	ldr	r3, [pc, #196]	@ (800371c <HAL_RCC_ClockConfig+0x244>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	e00d      	b.n	8003676 <HAL_RCC_ClockConfig+0x19e>
 800365a:	2302      	movs	r3, #2
 800365c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003660:	fa93 f3a3 	rbit	r3, r3
 8003664:	627b      	str	r3, [r7, #36]	@ 0x24
 8003666:	2302      	movs	r3, #2
 8003668:	623b      	str	r3, [r7, #32]
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	fa93 f3a3 	rbit	r3, r3
 8003670:	61fb      	str	r3, [r7, #28]
 8003672:	4b2a      	ldr	r3, [pc, #168]	@ (800371c <HAL_RCC_ClockConfig+0x244>)
 8003674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003676:	2202      	movs	r2, #2
 8003678:	61ba      	str	r2, [r7, #24]
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	fa92 f2a2 	rbit	r2, r2
 8003680:	617a      	str	r2, [r7, #20]
  return result;
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	fab2 f282 	clz	r2, r2
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	f042 0220 	orr.w	r2, r2, #32
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	f002 021f 	and.w	r2, r2, #31
 8003694:	2101      	movs	r1, #1
 8003696:	fa01 f202 	lsl.w	r2, r1, r2
 800369a:	4013      	ands	r3, r2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e07a      	b.n	800379a <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036a4:	4b1d      	ldr	r3, [pc, #116]	@ (800371c <HAL_RCC_ClockConfig+0x244>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f023 0203 	bic.w	r2, r3, #3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	491a      	ldr	r1, [pc, #104]	@ (800371c <HAL_RCC_ClockConfig+0x244>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036b6:	f7fd fa23 	bl	8000b00 <HAL_GetTick>
 80036ba:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036bc:	e00a      	b.n	80036d4 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036be:	f7fd fa1f 	bl	8000b00 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e062      	b.n	800379a <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d4:	4b11      	ldr	r3, [pc, #68]	@ (800371c <HAL_RCC_ClockConfig+0x244>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f003 020c 	and.w	r2, r3, #12
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d1eb      	bne.n	80036be <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003718 <HAL_RCC_ClockConfig+0x240>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d215      	bcs.n	8003720 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f4:	4b08      	ldr	r3, [pc, #32]	@ (8003718 <HAL_RCC_ClockConfig+0x240>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f023 0207 	bic.w	r2, r3, #7
 80036fc:	4906      	ldr	r1, [pc, #24]	@ (8003718 <HAL_RCC_ClockConfig+0x240>)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	4313      	orrs	r3, r2
 8003702:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003704:	4b04      	ldr	r3, [pc, #16]	@ (8003718 <HAL_RCC_ClockConfig+0x240>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	429a      	cmp	r2, r3
 8003710:	d006      	beq.n	8003720 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e041      	b.n	800379a <HAL_RCC_ClockConfig+0x2c2>
 8003716:	bf00      	nop
 8003718:	40022000 	.word	0x40022000
 800371c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b00      	cmp	r3, #0
 800372a:	d008      	beq.n	800373e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800372c:	4b1d      	ldr	r3, [pc, #116]	@ (80037a4 <HAL_RCC_ClockConfig+0x2cc>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	491a      	ldr	r1, [pc, #104]	@ (80037a4 <HAL_RCC_ClockConfig+0x2cc>)
 800373a:	4313      	orrs	r3, r2
 800373c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d009      	beq.n	800375e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800374a:	4b16      	ldr	r3, [pc, #88]	@ (80037a4 <HAL_RCC_ClockConfig+0x2cc>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	4912      	ldr	r1, [pc, #72]	@ (80037a4 <HAL_RCC_ClockConfig+0x2cc>)
 800375a:	4313      	orrs	r3, r2
 800375c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800375e:	f000 f829 	bl	80037b4 <HAL_RCC_GetSysClockFreq>
 8003762:	4601      	mov	r1, r0
 8003764:	4b0f      	ldr	r3, [pc, #60]	@ (80037a4 <HAL_RCC_ClockConfig+0x2cc>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800376c:	22f0      	movs	r2, #240	@ 0xf0
 800376e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	fa92 f2a2 	rbit	r2, r2
 8003776:	60fa      	str	r2, [r7, #12]
  return result;
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	fab2 f282 	clz	r2, r2
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	40d3      	lsrs	r3, r2
 8003782:	4a09      	ldr	r2, [pc, #36]	@ (80037a8 <HAL_RCC_ClockConfig+0x2d0>)
 8003784:	5cd3      	ldrb	r3, [r2, r3]
 8003786:	fa21 f303 	lsr.w	r3, r1, r3
 800378a:	4a08      	ldr	r2, [pc, #32]	@ (80037ac <HAL_RCC_ClockConfig+0x2d4>)
 800378c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800378e:	4b08      	ldr	r3, [pc, #32]	@ (80037b0 <HAL_RCC_ClockConfig+0x2d8>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f7fd f970 	bl	8000a78 <HAL_InitTick>
  
  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3778      	adds	r7, #120	@ 0x78
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40021000 	.word	0x40021000
 80037a8:	0800584c 	.word	0x0800584c
 80037ac:	20000000 	.word	0x20000000
 80037b0:	20000004 	.word	0x20000004

080037b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	2300      	movs	r3, #0
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	2300      	movs	r3, #0
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	2300      	movs	r3, #0
 80037c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80037ca:	2300      	movs	r3, #0
 80037cc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80037ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003848 <HAL_RCC_GetSysClockFreq+0x94>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f003 030c 	and.w	r3, r3, #12
 80037da:	2b04      	cmp	r3, #4
 80037dc:	d002      	beq.n	80037e4 <HAL_RCC_GetSysClockFreq+0x30>
 80037de:	2b08      	cmp	r3, #8
 80037e0:	d003      	beq.n	80037ea <HAL_RCC_GetSysClockFreq+0x36>
 80037e2:	e026      	b.n	8003832 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037e4:	4b19      	ldr	r3, [pc, #100]	@ (800384c <HAL_RCC_GetSysClockFreq+0x98>)
 80037e6:	613b      	str	r3, [r7, #16]
      break;
 80037e8:	e026      	b.n	8003838 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	0c9b      	lsrs	r3, r3, #18
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	4a17      	ldr	r2, [pc, #92]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x9c>)
 80037f4:	5cd3      	ldrb	r3, [r2, r3]
 80037f6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80037f8:	4b13      	ldr	r3, [pc, #76]	@ (8003848 <HAL_RCC_GetSysClockFreq+0x94>)
 80037fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037fc:	f003 030f 	and.w	r3, r3, #15
 8003800:	4a14      	ldr	r2, [pc, #80]	@ (8003854 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003802:	5cd3      	ldrb	r3, [r2, r3]
 8003804:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d008      	beq.n	8003822 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003810:	4a0e      	ldr	r2, [pc, #56]	@ (800384c <HAL_RCC_GetSysClockFreq+0x98>)
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	fbb2 f2f3 	udiv	r2, r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	fb02 f303 	mul.w	r3, r2, r3
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	e004      	b.n	800382c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a0c      	ldr	r2, [pc, #48]	@ (8003858 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003826:	fb02 f303 	mul.w	r3, r2, r3
 800382a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	613b      	str	r3, [r7, #16]
      break;
 8003830:	e002      	b.n	8003838 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003832:	4b06      	ldr	r3, [pc, #24]	@ (800384c <HAL_RCC_GetSysClockFreq+0x98>)
 8003834:	613b      	str	r3, [r7, #16]
      break;
 8003836:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003838:	693b      	ldr	r3, [r7, #16]
}
 800383a:	4618      	mov	r0, r3
 800383c:	371c      	adds	r7, #28
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	40021000 	.word	0x40021000
 800384c:	007a1200 	.word	0x007a1200
 8003850:	08005864 	.word	0x08005864
 8003854:	08005874 	.word	0x08005874
 8003858:	003d0900 	.word	0x003d0900

0800385c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003860:	4b03      	ldr	r3, [pc, #12]	@ (8003870 <HAL_RCC_GetHCLKFreq+0x14>)
 8003862:	681b      	ldr	r3, [r3, #0]
}
 8003864:	4618      	mov	r0, r3
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	20000000 	.word	0x20000000

08003874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800387a:	f7ff ffef 	bl	800385c <HAL_RCC_GetHCLKFreq>
 800387e:	4601      	mov	r1, r0
 8003880:	4b0b      	ldr	r3, [pc, #44]	@ (80038b0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003888:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800388c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	fa92 f2a2 	rbit	r2, r2
 8003894:	603a      	str	r2, [r7, #0]
  return result;
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	fab2 f282 	clz	r2, r2
 800389c:	b2d2      	uxtb	r2, r2
 800389e:	40d3      	lsrs	r3, r2
 80038a0:	4a04      	ldr	r2, [pc, #16]	@ (80038b4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80038a2:	5cd3      	ldrb	r3, [r2, r3]
 80038a4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80038a8:	4618      	mov	r0, r3
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40021000 	.word	0x40021000
 80038b4:	0800585c 	.word	0x0800585c

080038b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80038be:	f7ff ffcd 	bl	800385c <HAL_RCC_GetHCLKFreq>
 80038c2:	4601      	mov	r1, r0
 80038c4:	4b0b      	ldr	r3, [pc, #44]	@ (80038f4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80038cc:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80038d0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	fa92 f2a2 	rbit	r2, r2
 80038d8:	603a      	str	r2, [r7, #0]
  return result;
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	fab2 f282 	clz	r2, r2
 80038e0:	b2d2      	uxtb	r2, r2
 80038e2:	40d3      	lsrs	r3, r2
 80038e4:	4a04      	ldr	r2, [pc, #16]	@ (80038f8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80038e6:	5cd3      	ldrb	r3, [r2, r3]
 80038e8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80038ec:	4618      	mov	r0, r3
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40021000 	.word	0x40021000
 80038f8:	0800585c 	.word	0x0800585c

080038fc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b092      	sub	sp, #72	@ 0x48
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800390c:	2300      	movs	r3, #0
 800390e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 80cb 	beq.w	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003920:	4b8d      	ldr	r3, [pc, #564]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003922:	69db      	ldr	r3, [r3, #28]
 8003924:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10e      	bne.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800392c:	4b8a      	ldr	r3, [pc, #552]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	4a89      	ldr	r2, [pc, #548]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003932:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003936:	61d3      	str	r3, [r2, #28]
 8003938:	4b87      	ldr	r3, [pc, #540]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800393a:	69db      	ldr	r3, [r3, #28]
 800393c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003940:	60bb      	str	r3, [r7, #8]
 8003942:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003944:	2301      	movs	r3, #1
 8003946:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800394a:	4b84      	ldr	r3, [pc, #528]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003952:	2b00      	cmp	r3, #0
 8003954:	d118      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003956:	4b81      	ldr	r3, [pc, #516]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a80      	ldr	r2, [pc, #512]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800395c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003960:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003962:	f7fd f8cd 	bl	8000b00 <HAL_GetTick>
 8003966:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003968:	e008      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800396a:	f7fd f8c9 	bl	8000b00 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b64      	cmp	r3, #100	@ 0x64
 8003976:	d901      	bls.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e0e8      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x252>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800397c:	4b77      	ldr	r3, [pc, #476]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003984:	2b00      	cmp	r3, #0
 8003986:	d0f0      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003988:	4b73      	ldr	r3, [pc, #460]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003990:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003992:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003994:	2b00      	cmp	r3, #0
 8003996:	d07b      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d074      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039a6:	4b6c      	ldr	r3, [pc, #432]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80039b4:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b8:	fa93 f3a3 	rbit	r3, r3
 80039bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80039be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039c0:	fab3 f383 	clz	r3, r3
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	461a      	mov	r2, r3
 80039c8:	4b65      	ldr	r3, [pc, #404]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80039ca:	4413      	add	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	461a      	mov	r2, r3
 80039d0:	2301      	movs	r3, #1
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80039d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039dc:	fa93 f3a3 	rbit	r3, r3
 80039e0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80039e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039e4:	fab3 f383 	clz	r3, r3
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	461a      	mov	r2, r3
 80039ec:	4b5c      	ldr	r3, [pc, #368]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80039ee:	4413      	add	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	461a      	mov	r2, r3
 80039f4:	2300      	movs	r3, #0
 80039f6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80039f8:	4a57      	ldr	r2, [pc, #348]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80039fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039fc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d043      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a08:	f7fd f87a 	bl	8000b00 <HAL_GetTick>
 8003a0c:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a0e:	e00a      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a10:	f7fd f876 	bl	8000b00 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e093      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x252>
 8003a26:	2302      	movs	r3, #2
 8003a28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a2c:	fa93 f3a3 	rbit	r3, r3
 8003a30:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a32:	2302      	movs	r3, #2
 8003a34:	623b      	str	r3, [r7, #32]
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	fa93 f3a3 	rbit	r3, r3
 8003a3c:	61fb      	str	r3, [r7, #28]
  return result;
 8003a3e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a40:	fab3 f383 	clz	r3, r3
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d102      	bne.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003a50:	4b41      	ldr	r3, [pc, #260]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	e007      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8003a56:	2302      	movs	r3, #2
 8003a58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	fa93 f3a3 	rbit	r3, r3
 8003a60:	617b      	str	r3, [r7, #20]
 8003a62:	4b3d      	ldr	r3, [pc, #244]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a66:	2202      	movs	r2, #2
 8003a68:	613a      	str	r2, [r7, #16]
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	fa92 f2a2 	rbit	r2, r2
 8003a70:	60fa      	str	r2, [r7, #12]
  return result;
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	fab2 f282 	clz	r2, r2
 8003a78:	b2d2      	uxtb	r2, r2
 8003a7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a7e:	b2d2      	uxtb	r2, r2
 8003a80:	f002 021f 	and.w	r2, r2, #31
 8003a84:	2101      	movs	r1, #1
 8003a86:	fa01 f202 	lsl.w	r2, r1, r2
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0bf      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003a90:	4b31      	ldr	r3, [pc, #196]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	492e      	ldr	r1, [pc, #184]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003aa2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d105      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aaa:	4b2b      	ldr	r3, [pc, #172]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	4a2a      	ldr	r2, [pc, #168]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003ab0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ab4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d008      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ac2:	4b25      	ldr	r3, [pc, #148]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac6:	f023 0203 	bic.w	r2, r3, #3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	4922      	ldr	r1, [pc, #136]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0320 	and.w	r3, r3, #32
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d008      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae4:	f023 0210 	bic.w	r2, r3, #16
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	491a      	ldr	r1, [pc, #104]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d008      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003afe:	4b16      	ldr	r3, [pc, #88]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b02:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	4913      	ldr	r1, [pc, #76]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d008      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	490b      	ldr	r1, [pc, #44]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d008      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003b3a:	4b07      	ldr	r3, [pc, #28]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	4904      	ldr	r1, [pc, #16]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3748      	adds	r7, #72	@ 0x48
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	40007000 	.word	0x40007000
 8003b60:	10908100 	.word	0x10908100

08003b64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e040      	b.n	8003bf8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d106      	bne.n	8003b8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7fc feb8 	bl	80008fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2224      	movs	r2, #36	@ 0x24
 8003b90:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0201 	bic.w	r2, r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f95e 	bl	8003e6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f825 	bl	8003c00 <UART_SetConfig>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d101      	bne.n	8003bc0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e01b      	b.n	8003bf8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0201 	orr.w	r2, r2, #1
 8003bee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f9dd 	bl	8003fb0 <UART_CheckIdleState>
 8003bf6:	4603      	mov	r3, r0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b088      	sub	sp, #32
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	431a      	orrs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	4b8a      	ldr	r3, [pc, #552]	@ (8003e54 <UART_SetConfig+0x254>)
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6812      	ldr	r2, [r2, #0]
 8003c32:	6979      	ldr	r1, [r7, #20]
 8003c34:	430b      	orrs	r3, r1
 8003c36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a78      	ldr	r2, [pc, #480]	@ (8003e58 <UART_SetConfig+0x258>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d120      	bne.n	8003cbe <UART_SetConfig+0xbe>
 8003c7c:	4b77      	ldr	r3, [pc, #476]	@ (8003e5c <UART_SetConfig+0x25c>)
 8003c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c80:	f003 0303 	and.w	r3, r3, #3
 8003c84:	2b03      	cmp	r3, #3
 8003c86:	d817      	bhi.n	8003cb8 <UART_SetConfig+0xb8>
 8003c88:	a201      	add	r2, pc, #4	@ (adr r2, 8003c90 <UART_SetConfig+0x90>)
 8003c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8e:	bf00      	nop
 8003c90:	08003ca1 	.word	0x08003ca1
 8003c94:	08003cad 	.word	0x08003cad
 8003c98:	08003cb3 	.word	0x08003cb3
 8003c9c:	08003ca7 	.word	0x08003ca7
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	77fb      	strb	r3, [r7, #31]
 8003ca4:	e01d      	b.n	8003ce2 <UART_SetConfig+0xe2>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	77fb      	strb	r3, [r7, #31]
 8003caa:	e01a      	b.n	8003ce2 <UART_SetConfig+0xe2>
 8003cac:	2304      	movs	r3, #4
 8003cae:	77fb      	strb	r3, [r7, #31]
 8003cb0:	e017      	b.n	8003ce2 <UART_SetConfig+0xe2>
 8003cb2:	2308      	movs	r3, #8
 8003cb4:	77fb      	strb	r3, [r7, #31]
 8003cb6:	e014      	b.n	8003ce2 <UART_SetConfig+0xe2>
 8003cb8:	2310      	movs	r3, #16
 8003cba:	77fb      	strb	r3, [r7, #31]
 8003cbc:	e011      	b.n	8003ce2 <UART_SetConfig+0xe2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a67      	ldr	r2, [pc, #412]	@ (8003e60 <UART_SetConfig+0x260>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d102      	bne.n	8003cce <UART_SetConfig+0xce>
 8003cc8:	2300      	movs	r3, #0
 8003cca:	77fb      	strb	r3, [r7, #31]
 8003ccc:	e009      	b.n	8003ce2 <UART_SetConfig+0xe2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a64      	ldr	r2, [pc, #400]	@ (8003e64 <UART_SetConfig+0x264>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d102      	bne.n	8003cde <UART_SetConfig+0xde>
 8003cd8:	2300      	movs	r3, #0
 8003cda:	77fb      	strb	r3, [r7, #31]
 8003cdc:	e001      	b.n	8003ce2 <UART_SetConfig+0xe2>
 8003cde:	2310      	movs	r3, #16
 8003ce0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cea:	d15a      	bne.n	8003da2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003cec:	7ffb      	ldrb	r3, [r7, #31]
 8003cee:	2b08      	cmp	r3, #8
 8003cf0:	d827      	bhi.n	8003d42 <UART_SetConfig+0x142>
 8003cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf8 <UART_SetConfig+0xf8>)
 8003cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf8:	08003d1d 	.word	0x08003d1d
 8003cfc:	08003d25 	.word	0x08003d25
 8003d00:	08003d2d 	.word	0x08003d2d
 8003d04:	08003d43 	.word	0x08003d43
 8003d08:	08003d33 	.word	0x08003d33
 8003d0c:	08003d43 	.word	0x08003d43
 8003d10:	08003d43 	.word	0x08003d43
 8003d14:	08003d43 	.word	0x08003d43
 8003d18:	08003d3b 	.word	0x08003d3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d1c:	f7ff fdaa 	bl	8003874 <HAL_RCC_GetPCLK1Freq>
 8003d20:	61b8      	str	r0, [r7, #24]
        break;
 8003d22:	e013      	b.n	8003d4c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d24:	f7ff fdc8 	bl	80038b8 <HAL_RCC_GetPCLK2Freq>
 8003d28:	61b8      	str	r0, [r7, #24]
        break;
 8003d2a:	e00f      	b.n	8003d4c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d2c:	4b4e      	ldr	r3, [pc, #312]	@ (8003e68 <UART_SetConfig+0x268>)
 8003d2e:	61bb      	str	r3, [r7, #24]
        break;
 8003d30:	e00c      	b.n	8003d4c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d32:	f7ff fd3f 	bl	80037b4 <HAL_RCC_GetSysClockFreq>
 8003d36:	61b8      	str	r0, [r7, #24]
        break;
 8003d38:	e008      	b.n	8003d4c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d3e:	61bb      	str	r3, [r7, #24]
        break;
 8003d40:	e004      	b.n	8003d4c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003d42:	2300      	movs	r3, #0
 8003d44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	77bb      	strb	r3, [r7, #30]
        break;
 8003d4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d074      	beq.n	8003e3c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	005a      	lsls	r2, r3, #1
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	085b      	lsrs	r3, r3, #1
 8003d5c:	441a      	add	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	2b0f      	cmp	r3, #15
 8003d6c:	d916      	bls.n	8003d9c <UART_SetConfig+0x19c>
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d74:	d212      	bcs.n	8003d9c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	f023 030f 	bic.w	r3, r3, #15
 8003d7e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	085b      	lsrs	r3, r3, #1
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	89fb      	ldrh	r3, [r7, #14]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	89fa      	ldrh	r2, [r7, #14]
 8003d98:	60da      	str	r2, [r3, #12]
 8003d9a:	e04f      	b.n	8003e3c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	77bb      	strb	r3, [r7, #30]
 8003da0:	e04c      	b.n	8003e3c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003da2:	7ffb      	ldrb	r3, [r7, #31]
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d828      	bhi.n	8003dfa <UART_SetConfig+0x1fa>
 8003da8:	a201      	add	r2, pc, #4	@ (adr r2, 8003db0 <UART_SetConfig+0x1b0>)
 8003daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dae:	bf00      	nop
 8003db0:	08003dd5 	.word	0x08003dd5
 8003db4:	08003ddd 	.word	0x08003ddd
 8003db8:	08003de5 	.word	0x08003de5
 8003dbc:	08003dfb 	.word	0x08003dfb
 8003dc0:	08003deb 	.word	0x08003deb
 8003dc4:	08003dfb 	.word	0x08003dfb
 8003dc8:	08003dfb 	.word	0x08003dfb
 8003dcc:	08003dfb 	.word	0x08003dfb
 8003dd0:	08003df3 	.word	0x08003df3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dd4:	f7ff fd4e 	bl	8003874 <HAL_RCC_GetPCLK1Freq>
 8003dd8:	61b8      	str	r0, [r7, #24]
        break;
 8003dda:	e013      	b.n	8003e04 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ddc:	f7ff fd6c 	bl	80038b8 <HAL_RCC_GetPCLK2Freq>
 8003de0:	61b8      	str	r0, [r7, #24]
        break;
 8003de2:	e00f      	b.n	8003e04 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003de4:	4b20      	ldr	r3, [pc, #128]	@ (8003e68 <UART_SetConfig+0x268>)
 8003de6:	61bb      	str	r3, [r7, #24]
        break;
 8003de8:	e00c      	b.n	8003e04 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dea:	f7ff fce3 	bl	80037b4 <HAL_RCC_GetSysClockFreq>
 8003dee:	61b8      	str	r0, [r7, #24]
        break;
 8003df0:	e008      	b.n	8003e04 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003df2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003df6:	61bb      	str	r3, [r7, #24]
        break;
 8003df8:	e004      	b.n	8003e04 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	77bb      	strb	r3, [r7, #30]
        break;
 8003e02:	bf00      	nop
    }

    if (pclk != 0U)
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d018      	beq.n	8003e3c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	085a      	lsrs	r2, r3, #1
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	441a      	add	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	2b0f      	cmp	r3, #15
 8003e22:	d909      	bls.n	8003e38 <UART_SetConfig+0x238>
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e2a:	d205      	bcs.n	8003e38 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	60da      	str	r2, [r3, #12]
 8003e36:	e001      	b.n	8003e3c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003e48:	7fbb      	ldrb	r3, [r7, #30]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3720      	adds	r7, #32
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	efff69f3 	.word	0xefff69f3
 8003e58:	40013800 	.word	0x40013800
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	40004400 	.word	0x40004400
 8003e64:	40004800 	.word	0x40004800
 8003e68:	007a1200 	.word	0x007a1200

08003e6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e78:	f003 0308 	and.w	r3, r3, #8
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00a      	beq.n	8003e96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00a      	beq.n	8003eda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ede:	f003 0304 	and.w	r3, r3, #4
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00a      	beq.n	8003efc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f00:	f003 0310 	and.w	r3, r3, #16
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00a      	beq.n	8003f1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f22:	f003 0320 	and.w	r3, r3, #32
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00a      	beq.n	8003f40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d01a      	beq.n	8003f82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f6a:	d10a      	bne.n	8003f82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	605a      	str	r2, [r3, #4]
  }
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b098      	sub	sp, #96	@ 0x60
 8003fb4:	af02      	add	r7, sp, #8
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fc0:	f7fc fd9e 	bl	8000b00 <HAL_GetTick>
 8003fc4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0308 	and.w	r3, r3, #8
 8003fd0:	2b08      	cmp	r3, #8
 8003fd2:	d12e      	bne.n	8004032 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fd4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f88c 	bl	8004100 <UART_WaitOnFlagUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d021      	beq.n	8004032 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ff6:	e853 3f00 	ldrex	r3, [r3]
 8003ffa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ffe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004002:	653b      	str	r3, [r7, #80]	@ 0x50
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	461a      	mov	r2, r3
 800400a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800400c:	647b      	str	r3, [r7, #68]	@ 0x44
 800400e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004010:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004012:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004014:	e841 2300 	strex	r3, r2, [r1]
 8004018:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800401a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1e6      	bne.n	8003fee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2220      	movs	r2, #32
 8004024:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e062      	b.n	80040f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b04      	cmp	r3, #4
 800403e:	d149      	bne.n	80040d4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004040:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004048:	2200      	movs	r2, #0
 800404a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f856 	bl	8004100 <UART_WaitOnFlagUntilTimeout>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d03c      	beq.n	80040d4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004062:	e853 3f00 	ldrex	r3, [r3]
 8004066:	623b      	str	r3, [r7, #32]
   return(result);
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800406e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	461a      	mov	r2, r3
 8004076:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004078:	633b      	str	r3, [r7, #48]	@ 0x30
 800407a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800407e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004080:	e841 2300 	strex	r3, r2, [r1]
 8004084:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1e6      	bne.n	800405a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	3308      	adds	r3, #8
 8004092:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	e853 3f00 	ldrex	r3, [r3]
 800409a:	60fb      	str	r3, [r7, #12]
   return(result);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f023 0301 	bic.w	r3, r3, #1
 80040a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	3308      	adds	r3, #8
 80040aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040ac:	61fa      	str	r2, [r7, #28]
 80040ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b0:	69b9      	ldr	r1, [r7, #24]
 80040b2:	69fa      	ldr	r2, [r7, #28]
 80040b4:	e841 2300 	strex	r3, r2, [r1]
 80040b8:	617b      	str	r3, [r7, #20]
   return(result);
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1e5      	bne.n	800408c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e011      	b.n	80040f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2220      	movs	r2, #32
 80040d8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2220      	movs	r2, #32
 80040de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3758      	adds	r7, #88	@ 0x58
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	4613      	mov	r3, r2
 800410e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004110:	e04f      	b.n	80041b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004118:	d04b      	beq.n	80041b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800411a:	f7fc fcf1 	bl	8000b00 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	429a      	cmp	r2, r3
 8004128:	d302      	bcc.n	8004130 <UART_WaitOnFlagUntilTimeout+0x30>
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e04e      	b.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0304 	and.w	r3, r3, #4
 800413e:	2b00      	cmp	r3, #0
 8004140:	d037      	beq.n	80041b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2b80      	cmp	r3, #128	@ 0x80
 8004146:	d034      	beq.n	80041b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	2b40      	cmp	r3, #64	@ 0x40
 800414c:	d031      	beq.n	80041b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	f003 0308 	and.w	r3, r3, #8
 8004158:	2b08      	cmp	r3, #8
 800415a:	d110      	bne.n	800417e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2208      	movs	r2, #8
 8004162:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 f838 	bl	80041da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2208      	movs	r2, #8
 800416e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e029      	b.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004188:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800418c:	d111      	bne.n	80041b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004196:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 f81e 	bl	80041da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2220      	movs	r2, #32
 80041a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e00f      	b.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69da      	ldr	r2, [r3, #28]
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	4013      	ands	r3, r2
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	429a      	cmp	r2, r3
 80041c0:	bf0c      	ite	eq
 80041c2:	2301      	moveq	r3, #1
 80041c4:	2300      	movne	r3, #0
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	461a      	mov	r2, r3
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d0a0      	beq.n	8004112 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041da:	b480      	push	{r7}
 80041dc:	b095      	sub	sp, #84	@ 0x54
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041ea:	e853 3f00 	ldrex	r3, [r3]
 80041ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	461a      	mov	r2, r3
 80041fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004200:	643b      	str	r3, [r7, #64]	@ 0x40
 8004202:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004204:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004206:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004208:	e841 2300 	strex	r3, r2, [r1]
 800420c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800420e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1e6      	bne.n	80041e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	3308      	adds	r3, #8
 800421a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421c:	6a3b      	ldr	r3, [r7, #32]
 800421e:	e853 3f00 	ldrex	r3, [r3]
 8004222:	61fb      	str	r3, [r7, #28]
   return(result);
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	f023 0301 	bic.w	r3, r3, #1
 800422a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	3308      	adds	r3, #8
 8004232:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004234:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004236:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004238:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800423a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800423c:	e841 2300 	strex	r3, r2, [r1]
 8004240:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1e5      	bne.n	8004214 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800424c:	2b01      	cmp	r3, #1
 800424e:	d118      	bne.n	8004282 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	e853 3f00 	ldrex	r3, [r3]
 800425c:	60bb      	str	r3, [r7, #8]
   return(result);
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	f023 0310 	bic.w	r3, r3, #16
 8004264:	647b      	str	r3, [r7, #68]	@ 0x44
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	461a      	mov	r2, r3
 800426c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800426e:	61bb      	str	r3, [r7, #24]
 8004270:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004272:	6979      	ldr	r1, [r7, #20]
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	e841 2300 	strex	r3, r2, [r1]
 800427a:	613b      	str	r3, [r7, #16]
   return(result);
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1e6      	bne.n	8004250 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2220      	movs	r2, #32
 8004286:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004296:	bf00      	nop
 8004298:	3754      	adds	r7, #84	@ 0x54
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b085      	sub	sp, #20
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	4603      	mov	r3, r0
 80042aa:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80042ac:	2300      	movs	r3, #0
 80042ae:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80042b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042b4:	2b84      	cmp	r3, #132	@ 0x84
 80042b6:	d005      	beq.n	80042c4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80042b8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4413      	add	r3, r2
 80042c0:	3303      	adds	r3, #3
 80042c2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80042c4:	68fb      	ldr	r3, [r7, #12]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80042d6:	f000 fadb 	bl	8004890 <vTaskStartScheduler>
  
  return osOK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	bd80      	pop	{r7, pc}

080042e0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80042e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042e2:	b089      	sub	sp, #36	@ 0x24
 80042e4:	af04      	add	r7, sp, #16
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d020      	beq.n	8004334 <osThreadCreate+0x54>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d01c      	beq.n	8004334 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685c      	ldr	r4, [r3, #4]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691e      	ldr	r6, [r3, #16]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff ffc8 	bl	80042a2 <makeFreeRtosPriority>
 8004312:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800431c:	9202      	str	r2, [sp, #8]
 800431e:	9301      	str	r3, [sp, #4]
 8004320:	9100      	str	r1, [sp, #0]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	4632      	mov	r2, r6
 8004326:	4629      	mov	r1, r5
 8004328:	4620      	mov	r0, r4
 800432a:	f000 f8ed 	bl	8004508 <xTaskCreateStatic>
 800432e:	4603      	mov	r3, r0
 8004330:	60fb      	str	r3, [r7, #12]
 8004332:	e01c      	b.n	800436e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685c      	ldr	r4, [r3, #4]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004340:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004348:	4618      	mov	r0, r3
 800434a:	f7ff ffaa 	bl	80042a2 <makeFreeRtosPriority>
 800434e:	4602      	mov	r2, r0
 8004350:	f107 030c 	add.w	r3, r7, #12
 8004354:	9301      	str	r3, [sp, #4]
 8004356:	9200      	str	r2, [sp, #0]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	4632      	mov	r2, r6
 800435c:	4629      	mov	r1, r5
 800435e:	4620      	mov	r0, r4
 8004360:	f000 f931 	bl	80045c6 <xTaskCreate>
 8004364:	4603      	mov	r3, r0
 8004366:	2b01      	cmp	r3, #1
 8004368:	d001      	beq.n	800436e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800436a:	2300      	movs	r3, #0
 800436c:	e000      	b.n	8004370 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800436e:	68fb      	ldr	r3, [r7, #12]
}
 8004370:	4618      	mov	r0, r3
 8004372:	3714      	adds	r7, #20
 8004374:	46bd      	mov	sp, r7
 8004376:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004378 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <osDelay+0x16>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	e000      	b.n	8004390 <osDelay+0x18>
 800438e:	2301      	movs	r3, #1
 8004390:	4618      	mov	r0, r3
 8004392:	f000 fa47 	bl	8004824 <vTaskDelay>
  
  return osOK;
 8004396:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f103 0208 	add.w	r2, r3, #8
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f04f 32ff 	mov.w	r2, #4294967295
 80043b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f103 0208 	add.w	r2, r3, #8
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f103 0208 	add.w	r2, r3, #8
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80043ee:	bf00      	nop
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043fa:	b480      	push	{r7}
 80043fc:	b085      	sub	sp, #20
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
 8004402:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	1c5a      	adds	r2, r3, #1
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	601a      	str	r2, [r3, #0]
}
 8004436:	bf00      	nop
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004442:	b480      	push	{r7}
 8004444:	b085      	sub	sp, #20
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004458:	d103      	bne.n	8004462 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	e00c      	b.n	800447c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	3308      	adds	r3, #8
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	e002      	b.n	8004470 <vListInsert+0x2e>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	429a      	cmp	r2, r3
 800447a:	d2f6      	bcs.n	800446a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	601a      	str	r2, [r3, #0]
}
 80044a8:	bf00      	nop
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6892      	ldr	r2, [r2, #8]
 80044ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	6852      	ldr	r2, [r2, #4]
 80044d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d103      	bne.n	80044e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	1e5a      	subs	r2, r3, #1
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004508:	b580      	push	{r7, lr}
 800450a:	b08e      	sub	sp, #56	@ 0x38
 800450c:	af04      	add	r7, sp, #16
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
 8004514:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10b      	bne.n	8004534 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800451c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004520:	f383 8811 	msr	BASEPRI, r3
 8004524:	f3bf 8f6f 	isb	sy
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800452e:	bf00      	nop
 8004530:	bf00      	nop
 8004532:	e7fd      	b.n	8004530 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10b      	bne.n	8004552 <xTaskCreateStatic+0x4a>
	__asm volatile
 800453a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800453e:	f383 8811 	msr	BASEPRI, r3
 8004542:	f3bf 8f6f 	isb	sy
 8004546:	f3bf 8f4f 	dsb	sy
 800454a:	61fb      	str	r3, [r7, #28]
}
 800454c:	bf00      	nop
 800454e:	bf00      	nop
 8004550:	e7fd      	b.n	800454e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004552:	2354      	movs	r3, #84	@ 0x54
 8004554:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	2b54      	cmp	r3, #84	@ 0x54
 800455a:	d00b      	beq.n	8004574 <xTaskCreateStatic+0x6c>
	__asm volatile
 800455c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004560:	f383 8811 	msr	BASEPRI, r3
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	61bb      	str	r3, [r7, #24]
}
 800456e:	bf00      	nop
 8004570:	bf00      	nop
 8004572:	e7fd      	b.n	8004570 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004576:	2b00      	cmp	r3, #0
 8004578:	d01e      	beq.n	80045b8 <xTaskCreateStatic+0xb0>
 800457a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800457c:	2b00      	cmp	r3, #0
 800457e:	d01b      	beq.n	80045b8 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004582:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004586:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004588:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800458a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458c:	2202      	movs	r2, #2
 800458e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004592:	2300      	movs	r3, #0
 8004594:	9303      	str	r3, [sp, #12]
 8004596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004598:	9302      	str	r3, [sp, #8]
 800459a:	f107 0314 	add.w	r3, r7, #20
 800459e:	9301      	str	r3, [sp, #4]
 80045a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	68b9      	ldr	r1, [r7, #8]
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 f850 	bl	8004650 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80045b2:	f000 f8cd 	bl	8004750 <prvAddNewTaskToReadyList>
 80045b6:	e001      	b.n	80045bc <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80045b8:	2300      	movs	r3, #0
 80045ba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80045bc:	697b      	ldr	r3, [r7, #20]
	}
 80045be:	4618      	mov	r0, r3
 80045c0:	3728      	adds	r7, #40	@ 0x28
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b08c      	sub	sp, #48	@ 0x30
 80045ca:	af04      	add	r7, sp, #16
 80045cc:	60f8      	str	r0, [r7, #12]
 80045ce:	60b9      	str	r1, [r7, #8]
 80045d0:	603b      	str	r3, [r7, #0]
 80045d2:	4613      	mov	r3, r2
 80045d4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045d6:	88fb      	ldrh	r3, [r7, #6]
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 fef4 	bl	80053c8 <pvPortMalloc>
 80045e0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00e      	beq.n	8004606 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80045e8:	2054      	movs	r0, #84	@ 0x54
 80045ea:	f000 feed 	bl	80053c8 <pvPortMalloc>
 80045ee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80045fc:	e005      	b.n	800460a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80045fe:	6978      	ldr	r0, [r7, #20]
 8004600:	f000 ffaa 	bl	8005558 <vPortFree>
 8004604:	e001      	b.n	800460a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004606:	2300      	movs	r3, #0
 8004608:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d017      	beq.n	8004640 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004618:	88fa      	ldrh	r2, [r7, #6]
 800461a:	2300      	movs	r3, #0
 800461c:	9303      	str	r3, [sp, #12]
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	9302      	str	r3, [sp, #8]
 8004622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004624:	9301      	str	r3, [sp, #4]
 8004626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	68b9      	ldr	r1, [r7, #8]
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 f80e 	bl	8004650 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004634:	69f8      	ldr	r0, [r7, #28]
 8004636:	f000 f88b 	bl	8004750 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800463a:	2301      	movs	r3, #1
 800463c:	61bb      	str	r3, [r7, #24]
 800463e:	e002      	b.n	8004646 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004640:	f04f 33ff 	mov.w	r3, #4294967295
 8004644:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004646:	69bb      	ldr	r3, [r7, #24]
	}
 8004648:	4618      	mov	r0, r3
 800464a:	3720      	adds	r7, #32
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b088      	sub	sp, #32
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800465e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004660:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004668:	3b01      	subs	r3, #1
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	f023 0307 	bic.w	r3, r3, #7
 8004676:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00b      	beq.n	800469a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004686:	f383 8811 	msr	BASEPRI, r3
 800468a:	f3bf 8f6f 	isb	sy
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	617b      	str	r3, [r7, #20]
}
 8004694:	bf00      	nop
 8004696:	bf00      	nop
 8004698:	e7fd      	b.n	8004696 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800469a:	2300      	movs	r3, #0
 800469c:	61fb      	str	r3, [r7, #28]
 800469e:	e012      	b.n	80046c6 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	4413      	add	r3, r2
 80046a6:	7819      	ldrb	r1, [r3, #0]
 80046a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	4413      	add	r3, r2
 80046ae:	3334      	adds	r3, #52	@ 0x34
 80046b0:	460a      	mov	r2, r1
 80046b2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	4413      	add	r3, r2
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d006      	beq.n	80046ce <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	3301      	adds	r3, #1
 80046c4:	61fb      	str	r3, [r7, #28]
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	2b0f      	cmp	r3, #15
 80046ca:	d9e9      	bls.n	80046a0 <prvInitialiseNewTask+0x50>
 80046cc:	e000      	b.n	80046d0 <prvInitialiseNewTask+0x80>
		{
			break;
 80046ce:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80046d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80046d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046da:	2b06      	cmp	r3, #6
 80046dc:	d901      	bls.n	80046e2 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80046de:	2306      	movs	r3, #6
 80046e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80046e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046e6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80046e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046ec:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80046ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f0:	2200      	movs	r2, #0
 80046f2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80046f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f6:	3304      	adds	r3, #4
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff fe71 	bl	80043e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80046fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004700:	3318      	adds	r3, #24
 8004702:	4618      	mov	r0, r3
 8004704:	f7ff fe6c 	bl	80043e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800470a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800470c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800470e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004710:	f1c3 0207 	rsb	r2, r3, #7
 8004714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004716:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800471a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800471c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800471e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004720:	2200      	movs	r2, #0
 8004722:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	68f9      	ldr	r1, [r7, #12]
 8004730:	69b8      	ldr	r0, [r7, #24]
 8004732:	f000 fc35 	bl	8004fa0 <pxPortInitialiseStack>
 8004736:	4602      	mov	r2, r0
 8004738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800473a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800473c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800473e:	2b00      	cmp	r3, #0
 8004740:	d002      	beq.n	8004748 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004744:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004746:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004748:	bf00      	nop
 800474a:	3720      	adds	r7, #32
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004758:	f000 fd56 	bl	8005208 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800475c:	4b2a      	ldr	r3, [pc, #168]	@ (8004808 <prvAddNewTaskToReadyList+0xb8>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	3301      	adds	r3, #1
 8004762:	4a29      	ldr	r2, [pc, #164]	@ (8004808 <prvAddNewTaskToReadyList+0xb8>)
 8004764:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004766:	4b29      	ldr	r3, [pc, #164]	@ (800480c <prvAddNewTaskToReadyList+0xbc>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d109      	bne.n	8004782 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800476e:	4a27      	ldr	r2, [pc, #156]	@ (800480c <prvAddNewTaskToReadyList+0xbc>)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004774:	4b24      	ldr	r3, [pc, #144]	@ (8004808 <prvAddNewTaskToReadyList+0xb8>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d110      	bne.n	800479e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800477c:	f000 fac8 	bl	8004d10 <prvInitialiseTaskLists>
 8004780:	e00d      	b.n	800479e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004782:	4b23      	ldr	r3, [pc, #140]	@ (8004810 <prvAddNewTaskToReadyList+0xc0>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d109      	bne.n	800479e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800478a:	4b20      	ldr	r3, [pc, #128]	@ (800480c <prvAddNewTaskToReadyList+0xbc>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004794:	429a      	cmp	r2, r3
 8004796:	d802      	bhi.n	800479e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004798:	4a1c      	ldr	r2, [pc, #112]	@ (800480c <prvAddNewTaskToReadyList+0xbc>)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800479e:	4b1d      	ldr	r3, [pc, #116]	@ (8004814 <prvAddNewTaskToReadyList+0xc4>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3301      	adds	r3, #1
 80047a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004814 <prvAddNewTaskToReadyList+0xc4>)
 80047a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ac:	2201      	movs	r2, #1
 80047ae:	409a      	lsls	r2, r3
 80047b0:	4b19      	ldr	r3, [pc, #100]	@ (8004818 <prvAddNewTaskToReadyList+0xc8>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	4a18      	ldr	r2, [pc, #96]	@ (8004818 <prvAddNewTaskToReadyList+0xc8>)
 80047b8:	6013      	str	r3, [r2, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047be:	4613      	mov	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4413      	add	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4a15      	ldr	r2, [pc, #84]	@ (800481c <prvAddNewTaskToReadyList+0xcc>)
 80047c8:	441a      	add	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	3304      	adds	r3, #4
 80047ce:	4619      	mov	r1, r3
 80047d0:	4610      	mov	r0, r2
 80047d2:	f7ff fe12 	bl	80043fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80047d6:	f000 fd49 	bl	800526c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80047da:	4b0d      	ldr	r3, [pc, #52]	@ (8004810 <prvAddNewTaskToReadyList+0xc0>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00e      	beq.n	8004800 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80047e2:	4b0a      	ldr	r3, [pc, #40]	@ (800480c <prvAddNewTaskToReadyList+0xbc>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d207      	bcs.n	8004800 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80047f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004820 <prvAddNewTaskToReadyList+0xd0>)
 80047f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004800:	bf00      	nop
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	20000540 	.word	0x20000540
 800480c:	20000440 	.word	0x20000440
 8004810:	2000054c 	.word	0x2000054c
 8004814:	2000055c 	.word	0x2000055c
 8004818:	20000548 	.word	0x20000548
 800481c:	20000444 	.word	0x20000444
 8004820:	e000ed04 	.word	0xe000ed04

08004824 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800482c:	2300      	movs	r3, #0
 800482e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d018      	beq.n	8004868 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004836:	4b14      	ldr	r3, [pc, #80]	@ (8004888 <vTaskDelay+0x64>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00b      	beq.n	8004856 <vTaskDelay+0x32>
	__asm volatile
 800483e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004842:	f383 8811 	msr	BASEPRI, r3
 8004846:	f3bf 8f6f 	isb	sy
 800484a:	f3bf 8f4f 	dsb	sy
 800484e:	60bb      	str	r3, [r7, #8]
}
 8004850:	bf00      	nop
 8004852:	bf00      	nop
 8004854:	e7fd      	b.n	8004852 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004856:	f000 f87d 	bl	8004954 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800485a:	2100      	movs	r1, #0
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 fb39 	bl	8004ed4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004862:	f000 f885 	bl	8004970 <xTaskResumeAll>
 8004866:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d107      	bne.n	800487e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800486e:	4b07      	ldr	r3, [pc, #28]	@ (800488c <vTaskDelay+0x68>)
 8004870:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	f3bf 8f4f 	dsb	sy
 800487a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800487e:	bf00      	nop
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20000568 	.word	0x20000568
 800488c:	e000ed04 	.word	0xe000ed04

08004890 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b08a      	sub	sp, #40	@ 0x28
 8004894:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004896:	2300      	movs	r3, #0
 8004898:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800489a:	2300      	movs	r3, #0
 800489c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800489e:	463a      	mov	r2, r7
 80048a0:	1d39      	adds	r1, r7, #4
 80048a2:	f107 0308 	add.w	r3, r7, #8
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fb fc92 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80048ac:	6839      	ldr	r1, [r7, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	9202      	str	r2, [sp, #8]
 80048b4:	9301      	str	r3, [sp, #4]
 80048b6:	2300      	movs	r3, #0
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	2300      	movs	r3, #0
 80048bc:	460a      	mov	r2, r1
 80048be:	491f      	ldr	r1, [pc, #124]	@ (800493c <vTaskStartScheduler+0xac>)
 80048c0:	481f      	ldr	r0, [pc, #124]	@ (8004940 <vTaskStartScheduler+0xb0>)
 80048c2:	f7ff fe21 	bl	8004508 <xTaskCreateStatic>
 80048c6:	4603      	mov	r3, r0
 80048c8:	4a1e      	ldr	r2, [pc, #120]	@ (8004944 <vTaskStartScheduler+0xb4>)
 80048ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80048cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004944 <vTaskStartScheduler+0xb4>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d002      	beq.n	80048da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80048d4:	2301      	movs	r3, #1
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	e001      	b.n	80048de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80048da:	2300      	movs	r3, #0
 80048dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d116      	bne.n	8004912 <vTaskStartScheduler+0x82>
	__asm volatile
 80048e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e8:	f383 8811 	msr	BASEPRI, r3
 80048ec:	f3bf 8f6f 	isb	sy
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	613b      	str	r3, [r7, #16]
}
 80048f6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80048f8:	4b13      	ldr	r3, [pc, #76]	@ (8004948 <vTaskStartScheduler+0xb8>)
 80048fa:	f04f 32ff 	mov.w	r2, #4294967295
 80048fe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004900:	4b12      	ldr	r3, [pc, #72]	@ (800494c <vTaskStartScheduler+0xbc>)
 8004902:	2201      	movs	r2, #1
 8004904:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004906:	4b12      	ldr	r3, [pc, #72]	@ (8004950 <vTaskStartScheduler+0xc0>)
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800490c:	f000 fbd8 	bl	80050c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004910:	e00f      	b.n	8004932 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004918:	d10b      	bne.n	8004932 <vTaskStartScheduler+0xa2>
	__asm volatile
 800491a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800491e:	f383 8811 	msr	BASEPRI, r3
 8004922:	f3bf 8f6f 	isb	sy
 8004926:	f3bf 8f4f 	dsb	sy
 800492a:	60fb      	str	r3, [r7, #12]
}
 800492c:	bf00      	nop
 800492e:	bf00      	nop
 8004930:	e7fd      	b.n	800492e <vTaskStartScheduler+0x9e>
}
 8004932:	bf00      	nop
 8004934:	3718      	adds	r7, #24
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	08005844 	.word	0x08005844
 8004940:	08004ce1 	.word	0x08004ce1
 8004944:	20000564 	.word	0x20000564
 8004948:	20000560 	.word	0x20000560
 800494c:	2000054c 	.word	0x2000054c
 8004950:	20000544 	.word	0x20000544

08004954 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004954:	b480      	push	{r7}
 8004956:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004958:	4b04      	ldr	r3, [pc, #16]	@ (800496c <vTaskSuspendAll+0x18>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	3301      	adds	r3, #1
 800495e:	4a03      	ldr	r2, [pc, #12]	@ (800496c <vTaskSuspendAll+0x18>)
 8004960:	6013      	str	r3, [r2, #0]
}
 8004962:	bf00      	nop
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	20000568 	.word	0x20000568

08004970 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004976:	2300      	movs	r3, #0
 8004978:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800497a:	2300      	movs	r3, #0
 800497c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800497e:	4b42      	ldr	r3, [pc, #264]	@ (8004a88 <xTaskResumeAll+0x118>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10b      	bne.n	800499e <xTaskResumeAll+0x2e>
	__asm volatile
 8004986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800498a:	f383 8811 	msr	BASEPRI, r3
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f3bf 8f4f 	dsb	sy
 8004996:	603b      	str	r3, [r7, #0]
}
 8004998:	bf00      	nop
 800499a:	bf00      	nop
 800499c:	e7fd      	b.n	800499a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800499e:	f000 fc33 	bl	8005208 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80049a2:	4b39      	ldr	r3, [pc, #228]	@ (8004a88 <xTaskResumeAll+0x118>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	3b01      	subs	r3, #1
 80049a8:	4a37      	ldr	r2, [pc, #220]	@ (8004a88 <xTaskResumeAll+0x118>)
 80049aa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049ac:	4b36      	ldr	r3, [pc, #216]	@ (8004a88 <xTaskResumeAll+0x118>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d161      	bne.n	8004a78 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80049b4:	4b35      	ldr	r3, [pc, #212]	@ (8004a8c <xTaskResumeAll+0x11c>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d05d      	beq.n	8004a78 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049bc:	e02e      	b.n	8004a1c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80049be:	4b34      	ldr	r3, [pc, #208]	@ (8004a90 <xTaskResumeAll+0x120>)
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	3318      	adds	r3, #24
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7ff fd72 	bl	80044b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	3304      	adds	r3, #4
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7ff fd6d 	bl	80044b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049de:	2201      	movs	r2, #1
 80049e0:	409a      	lsls	r2, r3
 80049e2:	4b2c      	ldr	r3, [pc, #176]	@ (8004a94 <xTaskResumeAll+0x124>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	4a2a      	ldr	r2, [pc, #168]	@ (8004a94 <xTaskResumeAll+0x124>)
 80049ea:	6013      	str	r3, [r2, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049f0:	4613      	mov	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4a27      	ldr	r2, [pc, #156]	@ (8004a98 <xTaskResumeAll+0x128>)
 80049fa:	441a      	add	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	3304      	adds	r3, #4
 8004a00:	4619      	mov	r1, r3
 8004a02:	4610      	mov	r0, r2
 8004a04:	f7ff fcf9 	bl	80043fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a0c:	4b23      	ldr	r3, [pc, #140]	@ (8004a9c <xTaskResumeAll+0x12c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d302      	bcc.n	8004a1c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004a16:	4b22      	ldr	r3, [pc, #136]	@ (8004aa0 <xTaskResumeAll+0x130>)
 8004a18:	2201      	movs	r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8004a90 <xTaskResumeAll+0x120>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1cc      	bne.n	80049be <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004a2a:	f000 fa0f 	bl	8004e4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8004aa4 <xTaskResumeAll+0x134>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d010      	beq.n	8004a5c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004a3a:	f000 f837 	bl	8004aac <xTaskIncrementTick>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d002      	beq.n	8004a4a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004a44:	4b16      	ldr	r3, [pc, #88]	@ (8004aa0 <xTaskResumeAll+0x130>)
 8004a46:	2201      	movs	r2, #1
 8004a48:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1f1      	bne.n	8004a3a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004a56:	4b13      	ldr	r3, [pc, #76]	@ (8004aa4 <xTaskResumeAll+0x134>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004a5c:	4b10      	ldr	r3, [pc, #64]	@ (8004aa0 <xTaskResumeAll+0x130>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d009      	beq.n	8004a78 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004a64:	2301      	movs	r3, #1
 8004a66:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004a68:	4b0f      	ldr	r3, [pc, #60]	@ (8004aa8 <xTaskResumeAll+0x138>)
 8004a6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a6e:	601a      	str	r2, [r3, #0]
 8004a70:	f3bf 8f4f 	dsb	sy
 8004a74:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a78:	f000 fbf8 	bl	800526c <vPortExitCritical>

	return xAlreadyYielded;
 8004a7c:	68bb      	ldr	r3, [r7, #8]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	20000568 	.word	0x20000568
 8004a8c:	20000540 	.word	0x20000540
 8004a90:	20000500 	.word	0x20000500
 8004a94:	20000548 	.word	0x20000548
 8004a98:	20000444 	.word	0x20000444
 8004a9c:	20000440 	.word	0x20000440
 8004aa0:	20000554 	.word	0x20000554
 8004aa4:	20000550 	.word	0x20000550
 8004aa8:	e000ed04 	.word	0xe000ed04

08004aac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ab6:	4b51      	ldr	r3, [pc, #324]	@ (8004bfc <xTaskIncrementTick+0x150>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f040 808e 	bne.w	8004bdc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ac0:	4b4f      	ldr	r3, [pc, #316]	@ (8004c00 <xTaskIncrementTick+0x154>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ac8:	4a4d      	ldr	r2, [pc, #308]	@ (8004c00 <xTaskIncrementTick+0x154>)
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d121      	bne.n	8004b18 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ad4:	4b4b      	ldr	r3, [pc, #300]	@ (8004c04 <xTaskIncrementTick+0x158>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00b      	beq.n	8004af6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae2:	f383 8811 	msr	BASEPRI, r3
 8004ae6:	f3bf 8f6f 	isb	sy
 8004aea:	f3bf 8f4f 	dsb	sy
 8004aee:	603b      	str	r3, [r7, #0]
}
 8004af0:	bf00      	nop
 8004af2:	bf00      	nop
 8004af4:	e7fd      	b.n	8004af2 <xTaskIncrementTick+0x46>
 8004af6:	4b43      	ldr	r3, [pc, #268]	@ (8004c04 <xTaskIncrementTick+0x158>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	4b42      	ldr	r3, [pc, #264]	@ (8004c08 <xTaskIncrementTick+0x15c>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a40      	ldr	r2, [pc, #256]	@ (8004c04 <xTaskIncrementTick+0x158>)
 8004b02:	6013      	str	r3, [r2, #0]
 8004b04:	4a40      	ldr	r2, [pc, #256]	@ (8004c08 <xTaskIncrementTick+0x15c>)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	4b40      	ldr	r3, [pc, #256]	@ (8004c0c <xTaskIncrementTick+0x160>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	4a3e      	ldr	r2, [pc, #248]	@ (8004c0c <xTaskIncrementTick+0x160>)
 8004b12:	6013      	str	r3, [r2, #0]
 8004b14:	f000 f99a 	bl	8004e4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004b18:	4b3d      	ldr	r3, [pc, #244]	@ (8004c10 <xTaskIncrementTick+0x164>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d34d      	bcc.n	8004bbe <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b22:	4b38      	ldr	r3, [pc, #224]	@ (8004c04 <xTaskIncrementTick+0x158>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <xTaskIncrementTick+0x84>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e000      	b.n	8004b32 <xTaskIncrementTick+0x86>
 8004b30:	2300      	movs	r3, #0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d004      	beq.n	8004b40 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b36:	4b36      	ldr	r3, [pc, #216]	@ (8004c10 <xTaskIncrementTick+0x164>)
 8004b38:	f04f 32ff 	mov.w	r2, #4294967295
 8004b3c:	601a      	str	r2, [r3, #0]
					break;
 8004b3e:	e03e      	b.n	8004bbe <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b40:	4b30      	ldr	r3, [pc, #192]	@ (8004c04 <xTaskIncrementTick+0x158>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d203      	bcs.n	8004b60 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b58:	4a2d      	ldr	r2, [pc, #180]	@ (8004c10 <xTaskIncrementTick+0x164>)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6013      	str	r3, [r2, #0]
						break;
 8004b5e:	e02e      	b.n	8004bbe <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	3304      	adds	r3, #4
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7ff fca5 	bl	80044b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d004      	beq.n	8004b7c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	3318      	adds	r3, #24
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7ff fc9c 	bl	80044b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b80:	2201      	movs	r2, #1
 8004b82:	409a      	lsls	r2, r3
 8004b84:	4b23      	ldr	r3, [pc, #140]	@ (8004c14 <xTaskIncrementTick+0x168>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	4a22      	ldr	r2, [pc, #136]	@ (8004c14 <xTaskIncrementTick+0x168>)
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b92:	4613      	mov	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4a1f      	ldr	r2, [pc, #124]	@ (8004c18 <xTaskIncrementTick+0x16c>)
 8004b9c:	441a      	add	r2, r3
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	3304      	adds	r3, #4
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	4610      	mov	r0, r2
 8004ba6:	f7ff fc28 	bl	80043fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bae:	4b1b      	ldr	r3, [pc, #108]	@ (8004c1c <xTaskIncrementTick+0x170>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d3b4      	bcc.n	8004b22 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bbc:	e7b1      	b.n	8004b22 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004bbe:	4b17      	ldr	r3, [pc, #92]	@ (8004c1c <xTaskIncrementTick+0x170>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bc4:	4914      	ldr	r1, [pc, #80]	@ (8004c18 <xTaskIncrementTick+0x16c>)
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4413      	add	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	440b      	add	r3, r1
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d907      	bls.n	8004be6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	617b      	str	r3, [r7, #20]
 8004bda:	e004      	b.n	8004be6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004bdc:	4b10      	ldr	r3, [pc, #64]	@ (8004c20 <xTaskIncrementTick+0x174>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	3301      	adds	r3, #1
 8004be2:	4a0f      	ldr	r2, [pc, #60]	@ (8004c20 <xTaskIncrementTick+0x174>)
 8004be4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004be6:	4b0f      	ldr	r3, [pc, #60]	@ (8004c24 <xTaskIncrementTick+0x178>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004bf2:	697b      	ldr	r3, [r7, #20]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3718      	adds	r7, #24
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	20000568 	.word	0x20000568
 8004c00:	20000544 	.word	0x20000544
 8004c04:	200004f8 	.word	0x200004f8
 8004c08:	200004fc 	.word	0x200004fc
 8004c0c:	20000558 	.word	0x20000558
 8004c10:	20000560 	.word	0x20000560
 8004c14:	20000548 	.word	0x20000548
 8004c18:	20000444 	.word	0x20000444
 8004c1c:	20000440 	.word	0x20000440
 8004c20:	20000550 	.word	0x20000550
 8004c24:	20000554 	.word	0x20000554

08004c28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004c2e:	4b27      	ldr	r3, [pc, #156]	@ (8004ccc <vTaskSwitchContext+0xa4>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004c36:	4b26      	ldr	r3, [pc, #152]	@ (8004cd0 <vTaskSwitchContext+0xa8>)
 8004c38:	2201      	movs	r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c3c:	e040      	b.n	8004cc0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004c3e:	4b24      	ldr	r3, [pc, #144]	@ (8004cd0 <vTaskSwitchContext+0xa8>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004c44:	4b23      	ldr	r3, [pc, #140]	@ (8004cd4 <vTaskSwitchContext+0xac>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	fab3 f383 	clz	r3, r3
 8004c50:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004c52:	7afb      	ldrb	r3, [r7, #11]
 8004c54:	f1c3 031f 	rsb	r3, r3, #31
 8004c58:	617b      	str	r3, [r7, #20]
 8004c5a:	491f      	ldr	r1, [pc, #124]	@ (8004cd8 <vTaskSwitchContext+0xb0>)
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	440b      	add	r3, r1
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10b      	bne.n	8004c86 <vTaskSwitchContext+0x5e>
	__asm volatile
 8004c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c72:	f383 8811 	msr	BASEPRI, r3
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	607b      	str	r3, [r7, #4]
}
 8004c80:	bf00      	nop
 8004c82:	bf00      	nop
 8004c84:	e7fd      	b.n	8004c82 <vTaskSwitchContext+0x5a>
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4a11      	ldr	r2, [pc, #68]	@ (8004cd8 <vTaskSwitchContext+0xb0>)
 8004c92:	4413      	add	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	605a      	str	r2, [r3, #4]
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	3308      	adds	r3, #8
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d104      	bne.n	8004cb6 <vTaskSwitchContext+0x8e>
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	605a      	str	r2, [r3, #4]
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	4a07      	ldr	r2, [pc, #28]	@ (8004cdc <vTaskSwitchContext+0xb4>)
 8004cbe:	6013      	str	r3, [r2, #0]
}
 8004cc0:	bf00      	nop
 8004cc2:	371c      	adds	r7, #28
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	20000568 	.word	0x20000568
 8004cd0:	20000554 	.word	0x20000554
 8004cd4:	20000548 	.word	0x20000548
 8004cd8:	20000444 	.word	0x20000444
 8004cdc:	20000440 	.word	0x20000440

08004ce0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ce8:	f000 f852 	bl	8004d90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004cec:	4b06      	ldr	r3, [pc, #24]	@ (8004d08 <prvIdleTask+0x28>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d9f9      	bls.n	8004ce8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004cf4:	4b05      	ldr	r3, [pc, #20]	@ (8004d0c <prvIdleTask+0x2c>)
 8004cf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d04:	e7f0      	b.n	8004ce8 <prvIdleTask+0x8>
 8004d06:	bf00      	nop
 8004d08:	20000444 	.word	0x20000444
 8004d0c:	e000ed04 	.word	0xe000ed04

08004d10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d16:	2300      	movs	r3, #0
 8004d18:	607b      	str	r3, [r7, #4]
 8004d1a:	e00c      	b.n	8004d36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4413      	add	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4a12      	ldr	r2, [pc, #72]	@ (8004d70 <prvInitialiseTaskLists+0x60>)
 8004d28:	4413      	add	r3, r2
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7ff fb38 	bl	80043a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	3301      	adds	r3, #1
 8004d34:	607b      	str	r3, [r7, #4]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b06      	cmp	r3, #6
 8004d3a:	d9ef      	bls.n	8004d1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d3c:	480d      	ldr	r0, [pc, #52]	@ (8004d74 <prvInitialiseTaskLists+0x64>)
 8004d3e:	f7ff fb2f 	bl	80043a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d42:	480d      	ldr	r0, [pc, #52]	@ (8004d78 <prvInitialiseTaskLists+0x68>)
 8004d44:	f7ff fb2c 	bl	80043a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d48:	480c      	ldr	r0, [pc, #48]	@ (8004d7c <prvInitialiseTaskLists+0x6c>)
 8004d4a:	f7ff fb29 	bl	80043a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d4e:	480c      	ldr	r0, [pc, #48]	@ (8004d80 <prvInitialiseTaskLists+0x70>)
 8004d50:	f7ff fb26 	bl	80043a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d54:	480b      	ldr	r0, [pc, #44]	@ (8004d84 <prvInitialiseTaskLists+0x74>)
 8004d56:	f7ff fb23 	bl	80043a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d88 <prvInitialiseTaskLists+0x78>)
 8004d5c:	4a05      	ldr	r2, [pc, #20]	@ (8004d74 <prvInitialiseTaskLists+0x64>)
 8004d5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d60:	4b0a      	ldr	r3, [pc, #40]	@ (8004d8c <prvInitialiseTaskLists+0x7c>)
 8004d62:	4a05      	ldr	r2, [pc, #20]	@ (8004d78 <prvInitialiseTaskLists+0x68>)
 8004d64:	601a      	str	r2, [r3, #0]
}
 8004d66:	bf00      	nop
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	20000444 	.word	0x20000444
 8004d74:	200004d0 	.word	0x200004d0
 8004d78:	200004e4 	.word	0x200004e4
 8004d7c:	20000500 	.word	0x20000500
 8004d80:	20000514 	.word	0x20000514
 8004d84:	2000052c 	.word	0x2000052c
 8004d88:	200004f8 	.word	0x200004f8
 8004d8c:	200004fc 	.word	0x200004fc

08004d90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d96:	e019      	b.n	8004dcc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d98:	f000 fa36 	bl	8005208 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004d9c:	4b10      	ldr	r3, [pc, #64]	@ (8004de0 <prvCheckTasksWaitingTermination+0x50>)
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	3304      	adds	r3, #4
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7ff fb83 	bl	80044b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004dae:	4b0d      	ldr	r3, [pc, #52]	@ (8004de4 <prvCheckTasksWaitingTermination+0x54>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	3b01      	subs	r3, #1
 8004db4:	4a0b      	ldr	r2, [pc, #44]	@ (8004de4 <prvCheckTasksWaitingTermination+0x54>)
 8004db6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004db8:	4b0b      	ldr	r3, [pc, #44]	@ (8004de8 <prvCheckTasksWaitingTermination+0x58>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8004de8 <prvCheckTasksWaitingTermination+0x58>)
 8004dc0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004dc2:	f000 fa53 	bl	800526c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f810 	bl	8004dec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004dcc:	4b06      	ldr	r3, [pc, #24]	@ (8004de8 <prvCheckTasksWaitingTermination+0x58>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1e1      	bne.n	8004d98 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop
 8004dd8:	3708      	adds	r7, #8
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	20000514 	.word	0x20000514
 8004de4:	20000540 	.word	0x20000540
 8004de8:	20000528 	.word	0x20000528

08004dec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d108      	bne.n	8004e10 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 fba8 	bl	8005558 <vPortFree>
				vPortFree( pxTCB );
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 fba5 	bl	8005558 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e0e:	e019      	b.n	8004e44 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d103      	bne.n	8004e22 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fb9c 	bl	8005558 <vPortFree>
	}
 8004e20:	e010      	b.n	8004e44 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d00b      	beq.n	8004e44 <prvDeleteTCB+0x58>
	__asm volatile
 8004e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	60fb      	str	r3, [r7, #12]
}
 8004e3e:	bf00      	nop
 8004e40:	bf00      	nop
 8004e42:	e7fd      	b.n	8004e40 <prvDeleteTCB+0x54>
	}
 8004e44:	bf00      	nop
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e52:	4b0f      	ldr	r3, [pc, #60]	@ (8004e90 <prvResetNextTaskUnblockTime+0x44>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d101      	bne.n	8004e60 <prvResetNextTaskUnblockTime+0x14>
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e000      	b.n	8004e62 <prvResetNextTaskUnblockTime+0x16>
 8004e60:	2300      	movs	r3, #0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d004      	beq.n	8004e70 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e66:	4b0b      	ldr	r3, [pc, #44]	@ (8004e94 <prvResetNextTaskUnblockTime+0x48>)
 8004e68:	f04f 32ff 	mov.w	r2, #4294967295
 8004e6c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e6e:	e008      	b.n	8004e82 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004e70:	4b07      	ldr	r3, [pc, #28]	@ (8004e90 <prvResetNextTaskUnblockTime+0x44>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	4a05      	ldr	r2, [pc, #20]	@ (8004e94 <prvResetNextTaskUnblockTime+0x48>)
 8004e80:	6013      	str	r3, [r2, #0]
}
 8004e82:	bf00      	nop
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	200004f8 	.word	0x200004f8
 8004e94:	20000560 	.word	0x20000560

08004e98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004ecc <xTaskGetSchedulerState+0x34>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d102      	bne.n	8004eac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	607b      	str	r3, [r7, #4]
 8004eaa:	e008      	b.n	8004ebe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eac:	4b08      	ldr	r3, [pc, #32]	@ (8004ed0 <xTaskGetSchedulerState+0x38>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d102      	bne.n	8004eba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	607b      	str	r3, [r7, #4]
 8004eb8:	e001      	b.n	8004ebe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ebe:	687b      	ldr	r3, [r7, #4]
	}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	2000054c 	.word	0x2000054c
 8004ed0:	20000568 	.word	0x20000568

08004ed4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ede:	4b29      	ldr	r3, [pc, #164]	@ (8004f84 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ee4:	4b28      	ldr	r3, [pc, #160]	@ (8004f88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	3304      	adds	r3, #4
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7ff fae2 	bl	80044b4 <uxListRemove>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10b      	bne.n	8004f0e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004ef6:	4b24      	ldr	r3, [pc, #144]	@ (8004f88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efc:	2201      	movs	r2, #1
 8004efe:	fa02 f303 	lsl.w	r3, r2, r3
 8004f02:	43da      	mvns	r2, r3
 8004f04:	4b21      	ldr	r3, [pc, #132]	@ (8004f8c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4013      	ands	r3, r2
 8004f0a:	4a20      	ldr	r2, [pc, #128]	@ (8004f8c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f0c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f14:	d10a      	bne.n	8004f2c <prvAddCurrentTaskToDelayedList+0x58>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d007      	beq.n	8004f2c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8004f88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	3304      	adds	r3, #4
 8004f22:	4619      	mov	r1, r3
 8004f24:	481a      	ldr	r0, [pc, #104]	@ (8004f90 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004f26:	f7ff fa68 	bl	80043fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f2a:	e026      	b.n	8004f7a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4413      	add	r3, r2
 8004f32:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f34:	4b14      	ldr	r3, [pc, #80]	@ (8004f88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d209      	bcs.n	8004f58 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f44:	4b13      	ldr	r3, [pc, #76]	@ (8004f94 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	4b0f      	ldr	r3, [pc, #60]	@ (8004f88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	3304      	adds	r3, #4
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4610      	mov	r0, r2
 8004f52:	f7ff fa76 	bl	8004442 <vListInsert>
}
 8004f56:	e010      	b.n	8004f7a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f58:	4b0f      	ldr	r3, [pc, #60]	@ (8004f98 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	3304      	adds	r3, #4
 8004f62:	4619      	mov	r1, r3
 8004f64:	4610      	mov	r0, r2
 8004f66:	f7ff fa6c 	bl	8004442 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8004f9c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d202      	bcs.n	8004f7a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004f74:	4a09      	ldr	r2, [pc, #36]	@ (8004f9c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	6013      	str	r3, [r2, #0]
}
 8004f7a:	bf00      	nop
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	20000544 	.word	0x20000544
 8004f88:	20000440 	.word	0x20000440
 8004f8c:	20000548 	.word	0x20000548
 8004f90:	2000052c 	.word	0x2000052c
 8004f94:	200004fc 	.word	0x200004fc
 8004f98:	200004f8 	.word	0x200004f8
 8004f9c:	20000560 	.word	0x20000560

08004fa0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	3b04      	subs	r3, #4
 8004fb0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004fb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	3b04      	subs	r3, #4
 8004fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f023 0201 	bic.w	r2, r3, #1
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	3b04      	subs	r3, #4
 8004fce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004fd0:	4a0c      	ldr	r2, [pc, #48]	@ (8005004 <pxPortInitialiseStack+0x64>)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	3b14      	subs	r3, #20
 8004fda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	3b04      	subs	r3, #4
 8004fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f06f 0202 	mvn.w	r2, #2
 8004fee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	3b20      	subs	r3, #32
 8004ff4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	08005009 	.word	0x08005009

08005008 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800500e:	2300      	movs	r3, #0
 8005010:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005012:	4b13      	ldr	r3, [pc, #76]	@ (8005060 <prvTaskExitError+0x58>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501a:	d00b      	beq.n	8005034 <prvTaskExitError+0x2c>
	__asm volatile
 800501c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005020:	f383 8811 	msr	BASEPRI, r3
 8005024:	f3bf 8f6f 	isb	sy
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	60fb      	str	r3, [r7, #12]
}
 800502e:	bf00      	nop
 8005030:	bf00      	nop
 8005032:	e7fd      	b.n	8005030 <prvTaskExitError+0x28>
	__asm volatile
 8005034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005038:	f383 8811 	msr	BASEPRI, r3
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	f3bf 8f4f 	dsb	sy
 8005044:	60bb      	str	r3, [r7, #8]
}
 8005046:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005048:	bf00      	nop
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d0fc      	beq.n	800504a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005050:	bf00      	nop
 8005052:	bf00      	nop
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	2000000c 	.word	0x2000000c
	...

08005070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005070:	4b07      	ldr	r3, [pc, #28]	@ (8005090 <pxCurrentTCBConst2>)
 8005072:	6819      	ldr	r1, [r3, #0]
 8005074:	6808      	ldr	r0, [r1, #0]
 8005076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800507a:	f380 8809 	msr	PSP, r0
 800507e:	f3bf 8f6f 	isb	sy
 8005082:	f04f 0000 	mov.w	r0, #0
 8005086:	f380 8811 	msr	BASEPRI, r0
 800508a:	4770      	bx	lr
 800508c:	f3af 8000 	nop.w

08005090 <pxCurrentTCBConst2>:
 8005090:	20000440 	.word	0x20000440
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005094:	bf00      	nop
 8005096:	bf00      	nop

08005098 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005098:	4808      	ldr	r0, [pc, #32]	@ (80050bc <prvPortStartFirstTask+0x24>)
 800509a:	6800      	ldr	r0, [r0, #0]
 800509c:	6800      	ldr	r0, [r0, #0]
 800509e:	f380 8808 	msr	MSP, r0
 80050a2:	f04f 0000 	mov.w	r0, #0
 80050a6:	f380 8814 	msr	CONTROL, r0
 80050aa:	b662      	cpsie	i
 80050ac:	b661      	cpsie	f
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	df00      	svc	0
 80050b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80050ba:	bf00      	nop
 80050bc:	e000ed08 	.word	0xe000ed08

080050c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80050c6:	4b47      	ldr	r3, [pc, #284]	@ (80051e4 <xPortStartScheduler+0x124>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a47      	ldr	r2, [pc, #284]	@ (80051e8 <xPortStartScheduler+0x128>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d10b      	bne.n	80050e8 <xPortStartScheduler+0x28>
	__asm volatile
 80050d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d4:	f383 8811 	msr	BASEPRI, r3
 80050d8:	f3bf 8f6f 	isb	sy
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	60fb      	str	r3, [r7, #12]
}
 80050e2:	bf00      	nop
 80050e4:	bf00      	nop
 80050e6:	e7fd      	b.n	80050e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80050e8:	4b3e      	ldr	r3, [pc, #248]	@ (80051e4 <xPortStartScheduler+0x124>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a3f      	ldr	r2, [pc, #252]	@ (80051ec <xPortStartScheduler+0x12c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d10b      	bne.n	800510a <xPortStartScheduler+0x4a>
	__asm volatile
 80050f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f6:	f383 8811 	msr	BASEPRI, r3
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	613b      	str	r3, [r7, #16]
}
 8005104:	bf00      	nop
 8005106:	bf00      	nop
 8005108:	e7fd      	b.n	8005106 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800510a:	4b39      	ldr	r3, [pc, #228]	@ (80051f0 <xPortStartScheduler+0x130>)
 800510c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	b2db      	uxtb	r3, r3
 8005114:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	22ff      	movs	r2, #255	@ 0xff
 800511a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	b2db      	uxtb	r3, r3
 8005122:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005124:	78fb      	ldrb	r3, [r7, #3]
 8005126:	b2db      	uxtb	r3, r3
 8005128:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800512c:	b2da      	uxtb	r2, r3
 800512e:	4b31      	ldr	r3, [pc, #196]	@ (80051f4 <xPortStartScheduler+0x134>)
 8005130:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005132:	4b31      	ldr	r3, [pc, #196]	@ (80051f8 <xPortStartScheduler+0x138>)
 8005134:	2207      	movs	r2, #7
 8005136:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005138:	e009      	b.n	800514e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800513a:	4b2f      	ldr	r3, [pc, #188]	@ (80051f8 <xPortStartScheduler+0x138>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	3b01      	subs	r3, #1
 8005140:	4a2d      	ldr	r2, [pc, #180]	@ (80051f8 <xPortStartScheduler+0x138>)
 8005142:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005144:	78fb      	ldrb	r3, [r7, #3]
 8005146:	b2db      	uxtb	r3, r3
 8005148:	005b      	lsls	r3, r3, #1
 800514a:	b2db      	uxtb	r3, r3
 800514c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800514e:	78fb      	ldrb	r3, [r7, #3]
 8005150:	b2db      	uxtb	r3, r3
 8005152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005156:	2b80      	cmp	r3, #128	@ 0x80
 8005158:	d0ef      	beq.n	800513a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800515a:	4b27      	ldr	r3, [pc, #156]	@ (80051f8 <xPortStartScheduler+0x138>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f1c3 0307 	rsb	r3, r3, #7
 8005162:	2b04      	cmp	r3, #4
 8005164:	d00b      	beq.n	800517e <xPortStartScheduler+0xbe>
	__asm volatile
 8005166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800516a:	f383 8811 	msr	BASEPRI, r3
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f3bf 8f4f 	dsb	sy
 8005176:	60bb      	str	r3, [r7, #8]
}
 8005178:	bf00      	nop
 800517a:	bf00      	nop
 800517c:	e7fd      	b.n	800517a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800517e:	4b1e      	ldr	r3, [pc, #120]	@ (80051f8 <xPortStartScheduler+0x138>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	021b      	lsls	r3, r3, #8
 8005184:	4a1c      	ldr	r2, [pc, #112]	@ (80051f8 <xPortStartScheduler+0x138>)
 8005186:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005188:	4b1b      	ldr	r3, [pc, #108]	@ (80051f8 <xPortStartScheduler+0x138>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005190:	4a19      	ldr	r2, [pc, #100]	@ (80051f8 <xPortStartScheduler+0x138>)
 8005192:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	b2da      	uxtb	r2, r3
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800519c:	4b17      	ldr	r3, [pc, #92]	@ (80051fc <xPortStartScheduler+0x13c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a16      	ldr	r2, [pc, #88]	@ (80051fc <xPortStartScheduler+0x13c>)
 80051a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80051a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80051a8:	4b14      	ldr	r3, [pc, #80]	@ (80051fc <xPortStartScheduler+0x13c>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a13      	ldr	r2, [pc, #76]	@ (80051fc <xPortStartScheduler+0x13c>)
 80051ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80051b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80051b4:	f000 f8da 	bl	800536c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80051b8:	4b11      	ldr	r3, [pc, #68]	@ (8005200 <xPortStartScheduler+0x140>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80051be:	f000 f8f9 	bl	80053b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80051c2:	4b10      	ldr	r3, [pc, #64]	@ (8005204 <xPortStartScheduler+0x144>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a0f      	ldr	r2, [pc, #60]	@ (8005204 <xPortStartScheduler+0x144>)
 80051c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80051cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80051ce:	f7ff ff63 	bl	8005098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80051d2:	f7ff fd29 	bl	8004c28 <vTaskSwitchContext>
	prvTaskExitError();
 80051d6:	f7ff ff17 	bl	8005008 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3718      	adds	r7, #24
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	e000ed00 	.word	0xe000ed00
 80051e8:	410fc271 	.word	0x410fc271
 80051ec:	410fc270 	.word	0x410fc270
 80051f0:	e000e400 	.word	0xe000e400
 80051f4:	2000056c 	.word	0x2000056c
 80051f8:	20000570 	.word	0x20000570
 80051fc:	e000ed20 	.word	0xe000ed20
 8005200:	2000000c 	.word	0x2000000c
 8005204:	e000ef34 	.word	0xe000ef34

08005208 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
	__asm volatile
 800520e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005212:	f383 8811 	msr	BASEPRI, r3
 8005216:	f3bf 8f6f 	isb	sy
 800521a:	f3bf 8f4f 	dsb	sy
 800521e:	607b      	str	r3, [r7, #4]
}
 8005220:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005222:	4b10      	ldr	r3, [pc, #64]	@ (8005264 <vPortEnterCritical+0x5c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	3301      	adds	r3, #1
 8005228:	4a0e      	ldr	r2, [pc, #56]	@ (8005264 <vPortEnterCritical+0x5c>)
 800522a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800522c:	4b0d      	ldr	r3, [pc, #52]	@ (8005264 <vPortEnterCritical+0x5c>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d110      	bne.n	8005256 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005234:	4b0c      	ldr	r3, [pc, #48]	@ (8005268 <vPortEnterCritical+0x60>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00b      	beq.n	8005256 <vPortEnterCritical+0x4e>
	__asm volatile
 800523e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005242:	f383 8811 	msr	BASEPRI, r3
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	603b      	str	r3, [r7, #0]
}
 8005250:	bf00      	nop
 8005252:	bf00      	nop
 8005254:	e7fd      	b.n	8005252 <vPortEnterCritical+0x4a>
	}
}
 8005256:	bf00      	nop
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	2000000c 	.word	0x2000000c
 8005268:	e000ed04 	.word	0xe000ed04

0800526c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005272:	4b12      	ldr	r3, [pc, #72]	@ (80052bc <vPortExitCritical+0x50>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10b      	bne.n	8005292 <vPortExitCritical+0x26>
	__asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	607b      	str	r3, [r7, #4]
}
 800528c:	bf00      	nop
 800528e:	bf00      	nop
 8005290:	e7fd      	b.n	800528e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005292:	4b0a      	ldr	r3, [pc, #40]	@ (80052bc <vPortExitCritical+0x50>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	3b01      	subs	r3, #1
 8005298:	4a08      	ldr	r2, [pc, #32]	@ (80052bc <vPortExitCritical+0x50>)
 800529a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800529c:	4b07      	ldr	r3, [pc, #28]	@ (80052bc <vPortExitCritical+0x50>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d105      	bne.n	80052b0 <vPortExitCritical+0x44>
 80052a4:	2300      	movs	r3, #0
 80052a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80052ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	2000000c 	.word	0x2000000c

080052c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80052c0:	f3ef 8009 	mrs	r0, PSP
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	4b15      	ldr	r3, [pc, #84]	@ (8005320 <pxCurrentTCBConst>)
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	f01e 0f10 	tst.w	lr, #16
 80052d0:	bf08      	it	eq
 80052d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80052d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052da:	6010      	str	r0, [r2, #0]
 80052dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80052e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80052e4:	f380 8811 	msr	BASEPRI, r0
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	f3bf 8f6f 	isb	sy
 80052f0:	f7ff fc9a 	bl	8004c28 <vTaskSwitchContext>
 80052f4:	f04f 0000 	mov.w	r0, #0
 80052f8:	f380 8811 	msr	BASEPRI, r0
 80052fc:	bc09      	pop	{r0, r3}
 80052fe:	6819      	ldr	r1, [r3, #0]
 8005300:	6808      	ldr	r0, [r1, #0]
 8005302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005306:	f01e 0f10 	tst.w	lr, #16
 800530a:	bf08      	it	eq
 800530c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005310:	f380 8809 	msr	PSP, r0
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	f3af 8000 	nop.w

08005320 <pxCurrentTCBConst>:
 8005320:	20000440 	.word	0x20000440
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005324:	bf00      	nop
 8005326:	bf00      	nop

08005328 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
	__asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	607b      	str	r3, [r7, #4]
}
 8005340:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005342:	f7ff fbb3 	bl	8004aac <xTaskIncrementTick>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800534c:	4b06      	ldr	r3, [pc, #24]	@ (8005368 <xPortSysTickHandler+0x40>)
 800534e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	2300      	movs	r3, #0
 8005356:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	f383 8811 	msr	BASEPRI, r3
}
 800535e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005360:	bf00      	nop
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	e000ed04 	.word	0xe000ed04

0800536c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005370:	4b0b      	ldr	r3, [pc, #44]	@ (80053a0 <vPortSetupTimerInterrupt+0x34>)
 8005372:	2200      	movs	r2, #0
 8005374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005376:	4b0b      	ldr	r3, [pc, #44]	@ (80053a4 <vPortSetupTimerInterrupt+0x38>)
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800537c:	4b0a      	ldr	r3, [pc, #40]	@ (80053a8 <vPortSetupTimerInterrupt+0x3c>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a0a      	ldr	r2, [pc, #40]	@ (80053ac <vPortSetupTimerInterrupt+0x40>)
 8005382:	fba2 2303 	umull	r2, r3, r2, r3
 8005386:	099b      	lsrs	r3, r3, #6
 8005388:	4a09      	ldr	r2, [pc, #36]	@ (80053b0 <vPortSetupTimerInterrupt+0x44>)
 800538a:	3b01      	subs	r3, #1
 800538c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800538e:	4b04      	ldr	r3, [pc, #16]	@ (80053a0 <vPortSetupTimerInterrupt+0x34>)
 8005390:	2207      	movs	r2, #7
 8005392:	601a      	str	r2, [r3, #0]
}
 8005394:	bf00      	nop
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	e000e010 	.word	0xe000e010
 80053a4:	e000e018 	.word	0xe000e018
 80053a8:	20000000 	.word	0x20000000
 80053ac:	10624dd3 	.word	0x10624dd3
 80053b0:	e000e014 	.word	0xe000e014

080053b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80053b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80053c4 <vPortEnableVFP+0x10>
 80053b8:	6801      	ldr	r1, [r0, #0]
 80053ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80053be:	6001      	str	r1, [r0, #0]
 80053c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80053c2:	bf00      	nop
 80053c4:	e000ed88 	.word	0xe000ed88

080053c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b08a      	sub	sp, #40	@ 0x28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80053d0:	2300      	movs	r3, #0
 80053d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80053d4:	f7ff fabe 	bl	8004954 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80053d8:	4b5a      	ldr	r3, [pc, #360]	@ (8005544 <pvPortMalloc+0x17c>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80053e0:	f000 f916 	bl	8005610 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80053e4:	4b58      	ldr	r3, [pc, #352]	@ (8005548 <pvPortMalloc+0x180>)
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4013      	ands	r3, r2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f040 8090 	bne.w	8005512 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d01e      	beq.n	8005436 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80053f8:	2208      	movs	r2, #8
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4413      	add	r3, r2
 80053fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f003 0307 	and.w	r3, r3, #7
 8005406:	2b00      	cmp	r3, #0
 8005408:	d015      	beq.n	8005436 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f023 0307 	bic.w	r3, r3, #7
 8005410:	3308      	adds	r3, #8
 8005412:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f003 0307 	and.w	r3, r3, #7
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00b      	beq.n	8005436 <pvPortMalloc+0x6e>
	__asm volatile
 800541e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	617b      	str	r3, [r7, #20]
}
 8005430:	bf00      	nop
 8005432:	bf00      	nop
 8005434:	e7fd      	b.n	8005432 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d06a      	beq.n	8005512 <pvPortMalloc+0x14a>
 800543c:	4b43      	ldr	r3, [pc, #268]	@ (800554c <pvPortMalloc+0x184>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	429a      	cmp	r2, r3
 8005444:	d865      	bhi.n	8005512 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005446:	4b42      	ldr	r3, [pc, #264]	@ (8005550 <pvPortMalloc+0x188>)
 8005448:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800544a:	4b41      	ldr	r3, [pc, #260]	@ (8005550 <pvPortMalloc+0x188>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005450:	e004      	b.n	800545c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005454:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800545c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	429a      	cmp	r2, r3
 8005464:	d903      	bls.n	800546e <pvPortMalloc+0xa6>
 8005466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1f1      	bne.n	8005452 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800546e:	4b35      	ldr	r3, [pc, #212]	@ (8005544 <pvPortMalloc+0x17c>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005474:	429a      	cmp	r2, r3
 8005476:	d04c      	beq.n	8005512 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2208      	movs	r2, #8
 800547e:	4413      	add	r3, r2
 8005480:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	6a3b      	ldr	r3, [r7, #32]
 8005488:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800548a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548c:	685a      	ldr	r2, [r3, #4]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	1ad2      	subs	r2, r2, r3
 8005492:	2308      	movs	r3, #8
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	429a      	cmp	r2, r3
 8005498:	d920      	bls.n	80054dc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800549a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4413      	add	r3, r2
 80054a0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	f003 0307 	and.w	r3, r3, #7
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00b      	beq.n	80054c4 <pvPortMalloc+0xfc>
	__asm volatile
 80054ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b0:	f383 8811 	msr	BASEPRI, r3
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	613b      	str	r3, [r7, #16]
}
 80054be:	bf00      	nop
 80054c0:	bf00      	nop
 80054c2:	e7fd      	b.n	80054c0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80054c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	1ad2      	subs	r2, r2, r3
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80054d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80054d6:	69b8      	ldr	r0, [r7, #24]
 80054d8:	f000 f8fc 	bl	80056d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80054dc:	4b1b      	ldr	r3, [pc, #108]	@ (800554c <pvPortMalloc+0x184>)
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	4a19      	ldr	r2, [pc, #100]	@ (800554c <pvPortMalloc+0x184>)
 80054e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80054ea:	4b18      	ldr	r3, [pc, #96]	@ (800554c <pvPortMalloc+0x184>)
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	4b19      	ldr	r3, [pc, #100]	@ (8005554 <pvPortMalloc+0x18c>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d203      	bcs.n	80054fe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80054f6:	4b15      	ldr	r3, [pc, #84]	@ (800554c <pvPortMalloc+0x184>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a16      	ldr	r2, [pc, #88]	@ (8005554 <pvPortMalloc+0x18c>)
 80054fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80054fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	4b11      	ldr	r3, [pc, #68]	@ (8005548 <pvPortMalloc+0x180>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	431a      	orrs	r2, r3
 8005508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800550c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550e:	2200      	movs	r2, #0
 8005510:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005512:	f7ff fa2d 	bl	8004970 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	f003 0307 	and.w	r3, r3, #7
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00b      	beq.n	8005538 <pvPortMalloc+0x170>
	__asm volatile
 8005520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005524:	f383 8811 	msr	BASEPRI, r3
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	60fb      	str	r3, [r7, #12]
}
 8005532:	bf00      	nop
 8005534:	bf00      	nop
 8005536:	e7fd      	b.n	8005534 <pvPortMalloc+0x16c>
	return pvReturn;
 8005538:	69fb      	ldr	r3, [r7, #28]
}
 800553a:	4618      	mov	r0, r3
 800553c:	3728      	adds	r7, #40	@ 0x28
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	2000117c 	.word	0x2000117c
 8005548:	20001188 	.word	0x20001188
 800554c:	20001180 	.word	0x20001180
 8005550:	20001174 	.word	0x20001174
 8005554:	20001184 	.word	0x20001184

08005558 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d04a      	beq.n	8005600 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800556a:	2308      	movs	r3, #8
 800556c:	425b      	negs	r3, r3
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	4413      	add	r3, r2
 8005572:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	4b22      	ldr	r3, [pc, #136]	@ (8005608 <vPortFree+0xb0>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4013      	ands	r3, r2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10b      	bne.n	800559e <vPortFree+0x46>
	__asm volatile
 8005586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	60fb      	str	r3, [r7, #12]
}
 8005598:	bf00      	nop
 800559a:	bf00      	nop
 800559c:	e7fd      	b.n	800559a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00b      	beq.n	80055be <vPortFree+0x66>
	__asm volatile
 80055a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055aa:	f383 8811 	msr	BASEPRI, r3
 80055ae:	f3bf 8f6f 	isb	sy
 80055b2:	f3bf 8f4f 	dsb	sy
 80055b6:	60bb      	str	r3, [r7, #8]
}
 80055b8:	bf00      	nop
 80055ba:	bf00      	nop
 80055bc:	e7fd      	b.n	80055ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	685a      	ldr	r2, [r3, #4]
 80055c2:	4b11      	ldr	r3, [pc, #68]	@ (8005608 <vPortFree+0xb0>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4013      	ands	r3, r2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d019      	beq.n	8005600 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d115      	bne.n	8005600 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005608 <vPortFree+0xb0>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	43db      	mvns	r3, r3
 80055de:	401a      	ands	r2, r3
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80055e4:	f7ff f9b6 	bl	8004954 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	4b07      	ldr	r3, [pc, #28]	@ (800560c <vPortFree+0xb4>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4413      	add	r3, r2
 80055f2:	4a06      	ldr	r2, [pc, #24]	@ (800560c <vPortFree+0xb4>)
 80055f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80055f6:	6938      	ldr	r0, [r7, #16]
 80055f8:	f000 f86c 	bl	80056d4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80055fc:	f7ff f9b8 	bl	8004970 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005600:	bf00      	nop
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	20001188 	.word	0x20001188
 800560c:	20001180 	.word	0x20001180

08005610 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005616:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800561a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800561c:	4b27      	ldr	r3, [pc, #156]	@ (80056bc <prvHeapInit+0xac>)
 800561e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f003 0307 	and.w	r3, r3, #7
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00c      	beq.n	8005644 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	3307      	adds	r3, #7
 800562e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f023 0307 	bic.w	r3, r3, #7
 8005636:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	4a1f      	ldr	r2, [pc, #124]	@ (80056bc <prvHeapInit+0xac>)
 8005640:	4413      	add	r3, r2
 8005642:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005648:	4a1d      	ldr	r2, [pc, #116]	@ (80056c0 <prvHeapInit+0xb0>)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800564e:	4b1c      	ldr	r3, [pc, #112]	@ (80056c0 <prvHeapInit+0xb0>)
 8005650:	2200      	movs	r2, #0
 8005652:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	4413      	add	r3, r2
 800565a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800565c:	2208      	movs	r2, #8
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	1a9b      	subs	r3, r3, r2
 8005662:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f023 0307 	bic.w	r3, r3, #7
 800566a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4a15      	ldr	r2, [pc, #84]	@ (80056c4 <prvHeapInit+0xb4>)
 8005670:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005672:	4b14      	ldr	r3, [pc, #80]	@ (80056c4 <prvHeapInit+0xb4>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2200      	movs	r2, #0
 8005678:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800567a:	4b12      	ldr	r3, [pc, #72]	@ (80056c4 <prvHeapInit+0xb4>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2200      	movs	r2, #0
 8005680:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	1ad2      	subs	r2, r2, r3
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005690:	4b0c      	ldr	r3, [pc, #48]	@ (80056c4 <prvHeapInit+0xb4>)
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	4a0a      	ldr	r2, [pc, #40]	@ (80056c8 <prvHeapInit+0xb8>)
 800569e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	4a09      	ldr	r2, [pc, #36]	@ (80056cc <prvHeapInit+0xbc>)
 80056a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80056a8:	4b09      	ldr	r3, [pc, #36]	@ (80056d0 <prvHeapInit+0xc0>)
 80056aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80056ae:	601a      	str	r2, [r3, #0]
}
 80056b0:	bf00      	nop
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr
 80056bc:	20000574 	.word	0x20000574
 80056c0:	20001174 	.word	0x20001174
 80056c4:	2000117c 	.word	0x2000117c
 80056c8:	20001184 	.word	0x20001184
 80056cc:	20001180 	.word	0x20001180
 80056d0:	20001188 	.word	0x20001188

080056d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80056dc:	4b28      	ldr	r3, [pc, #160]	@ (8005780 <prvInsertBlockIntoFreeList+0xac>)
 80056de:	60fb      	str	r3, [r7, #12]
 80056e0:	e002      	b.n	80056e8 <prvInsertBlockIntoFreeList+0x14>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	60fb      	str	r3, [r7, #12]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d8f7      	bhi.n	80056e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	4413      	add	r3, r2
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	429a      	cmp	r2, r3
 8005702:	d108      	bne.n	8005716 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	441a      	add	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	441a      	add	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	429a      	cmp	r2, r3
 8005728:	d118      	bne.n	800575c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	4b15      	ldr	r3, [pc, #84]	@ (8005784 <prvInsertBlockIntoFreeList+0xb0>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	429a      	cmp	r2, r3
 8005734:	d00d      	beq.n	8005752 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	441a      	add	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	601a      	str	r2, [r3, #0]
 8005750:	e008      	b.n	8005764 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005752:	4b0c      	ldr	r3, [pc, #48]	@ (8005784 <prvInsertBlockIntoFreeList+0xb0>)
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	601a      	str	r2, [r3, #0]
 800575a:	e003      	b.n	8005764 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	429a      	cmp	r2, r3
 800576a:	d002      	beq.n	8005772 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005772:	bf00      	nop
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	20001174 	.word	0x20001174
 8005784:	2000117c 	.word	0x2000117c

08005788 <memset>:
 8005788:	4402      	add	r2, r0
 800578a:	4603      	mov	r3, r0
 800578c:	4293      	cmp	r3, r2
 800578e:	d100      	bne.n	8005792 <memset+0xa>
 8005790:	4770      	bx	lr
 8005792:	f803 1b01 	strb.w	r1, [r3], #1
 8005796:	e7f9      	b.n	800578c <memset+0x4>

08005798 <__libc_init_array>:
 8005798:	b570      	push	{r4, r5, r6, lr}
 800579a:	4d0d      	ldr	r5, [pc, #52]	@ (80057d0 <__libc_init_array+0x38>)
 800579c:	4c0d      	ldr	r4, [pc, #52]	@ (80057d4 <__libc_init_array+0x3c>)
 800579e:	1b64      	subs	r4, r4, r5
 80057a0:	10a4      	asrs	r4, r4, #2
 80057a2:	2600      	movs	r6, #0
 80057a4:	42a6      	cmp	r6, r4
 80057a6:	d109      	bne.n	80057bc <__libc_init_array+0x24>
 80057a8:	4d0b      	ldr	r5, [pc, #44]	@ (80057d8 <__libc_init_array+0x40>)
 80057aa:	4c0c      	ldr	r4, [pc, #48]	@ (80057dc <__libc_init_array+0x44>)
 80057ac:	f000 f818 	bl	80057e0 <_init>
 80057b0:	1b64      	subs	r4, r4, r5
 80057b2:	10a4      	asrs	r4, r4, #2
 80057b4:	2600      	movs	r6, #0
 80057b6:	42a6      	cmp	r6, r4
 80057b8:	d105      	bne.n	80057c6 <__libc_init_array+0x2e>
 80057ba:	bd70      	pop	{r4, r5, r6, pc}
 80057bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80057c0:	4798      	blx	r3
 80057c2:	3601      	adds	r6, #1
 80057c4:	e7ee      	b.n	80057a4 <__libc_init_array+0xc>
 80057c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ca:	4798      	blx	r3
 80057cc:	3601      	adds	r6, #1
 80057ce:	e7f2      	b.n	80057b6 <__libc_init_array+0x1e>
 80057d0:	08005884 	.word	0x08005884
 80057d4:	08005884 	.word	0x08005884
 80057d8:	08005884 	.word	0x08005884
 80057dc:	08005888 	.word	0x08005888

080057e0 <_init>:
 80057e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057e2:	bf00      	nop
 80057e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057e6:	bc08      	pop	{r3}
 80057e8:	469e      	mov	lr, r3
 80057ea:	4770      	bx	lr

080057ec <_fini>:
 80057ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ee:	bf00      	nop
 80057f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057f2:	bc08      	pop	{r3}
 80057f4:	469e      	mov	lr, r3
 80057f6:	4770      	bx	lr
